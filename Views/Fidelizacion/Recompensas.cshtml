@model RecompensasViewModel
@{
    ViewData["Title"] = "Programa de Recompensas";
}

<style>
    /* ===== SMART IMAGE POSITIONING SYSTEM AVANZADO ===== */
    .smart-image-container {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
        background: linear-gradient(45deg, #f8f9fa, #e9ecef);
        width: 100%;
        height: 150px;
    }

    .smart-image {
        width: 100%;
        height: 100%;
        transition: all 0.3s ease;
        object-fit: contain;
        object-position: center center;
        background: white;
    }

    /* Loading state */
    .smart-image-loading {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-shimmer 1.5s infinite;
    }
    
    @@keyframes loading-shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }

    /* Efectos hover inteligentes */
    .smart-image-container:hover .smart-image {
        transform: scale(1.05);
    }

    /* Fallback para cuando no hay imagen */
    .smart-fallback {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: white;
        font-size: 3rem;
        background: linear-gradient(45deg, #667eea, #764ba2);
    }

    /* ===== IMÁGENES VERTICALES QUE DEBEN SER HORIZONTALES (CROP) ===== */
    .smart-image[alt*="Cheddar"],
    .smart-image[alt*="Verace"],
    .smart-image[alt*="Jarro"],
    .smart-image[alt*="Litro"],
    .smart-image[alt*="Growler"],
    .smart-image[alt*="Corona"],
    .smart-image[alt*="Clásico"],
    .smart-image[alt*="3 jarros cerveza artesanal"],
    .smart-image[alt*="Botella de vino tinto"],
    .smart-image[alt*="Manaba mule"],
    .smart-image[alt*="Botella de caña manabita"],
    .smart-image[alt*="Botella de Antioqueño"],
    .smart-image[alt*="Botella de tequila"],
    .smart-image[alt*="Mojito maracuyá"],
    .smart-image[alt*="Mojito frutos rojos"],
    .smart-image[alt*="Botella de Ron Abuelo"],
    .smart-image[alt*="Gin Tonic Maracuyá"],
    .smart-image[alt*="Gin Tonic Frutos rojos"],
    .smart-image[alt*="Jager Sour"],
    .smart-image[alt*="Jagerito"] {
        object-fit: cover !important;
        object-position: center center !important;
        background: transparent !important;
    }

    /* ===== IMÁGENES CON FONDO BLANCO QUE DEBEN RELLENAR EL FONDO ===== */
    .smart-image[alt*="Agua sin gas"],
    .smart-image[alt*="Agua mineral"],
    .smart-image[alt*="Limonada"],
    .smart-image[alt*="Limonada Rosa"],
    .smart-image[alt*="Té caliente"],
    .smart-image[alt*="Coca-Cola"],
    .smart-image[alt*="Fanta"],
    .smart-image[alt*="Fioravanti"],
    .smart-image[alt*="Sprite"],
    .smart-image[alt*="Café americano"],
    .smart-image[alt*="Capuccino"],
    .smart-image[alt*="Iced Coffee"],
    .smart-image[alt*="Shot de aguardiente"] {
        object-fit: contain !important;
        object-position: center center !important;
        background: #FFFFFF !important;
    }

    /* ===== CONTENEDORES PARA IMÁGENES CON FONDO BLANCO ===== */
    .smart-image-container:has(.smart-image[alt*="Agua sin gas"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Agua mineral"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Limonada"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Limonada Rosa"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Té caliente"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Coca-Cola"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Fanta"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Fioravanti"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Sprite"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Café americano"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Capuccino"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Iced Coffee"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Shot de aguardiente"]) {
        background: #FFFFFF !important;
    }

    /* ===== IMÁGENES CON FONDO NEGRO ===== */
    .smart-image[alt*="Cuba libre"],
    .smart-image[alt*="Whisky Sour"],
    .smart-image[alt*="Whisky on the rocks"] {
        object-fit: contain !important;
        object-position: center center !important;
        background: #000000 !important;
    }

    /* ===== CONTENEDORES PARA IMÁGENES CON FONDO NEGRO ===== */
    .smart-image-container:has(.smart-image[alt*="Cuba libre"]) {
        background: #000000 !important;
    }

    .smart-image-container:has(.smart-image[alt*="Whisky Sour"]) {
        background: #000000 !important;
    }

    .smart-image-container:has(.smart-image[alt*="Whisky on the rocks"]) {
        background: #000000 !important;
    }

    /* ===== FALLBACK PARA NAVEGADORES QUE NO SOPORTAN :has() ===== */
    .smart-image-container[data-producto="agua-sin-gas"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="agua-mineral"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="limonada"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="limonada-rosa"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="te-caliente"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="coca-cola"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="fanta"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="fioravanti"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="sprite"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="cafe-americano"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="capuccino"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="iced-coffee"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="shot-aguardiente"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="cuba-libre"] {
        background: #000000 !important;
    }

    .smart-image-container[data-producto="whisky-sour"] {
        background: #000000 !important;
    }

    .smart-image-container[data-producto="whisky-on-the-rocks"] {
        background: #000000 !important;
    }

    /* ===== AJUSTE ESPECIAL PARA MÓVIL ===== */
    @@media (max-width: 768px) {
        .smart-image[alt*="Cheddar"],
        .smart-image[alt*="Verace"],
        .smart-image[alt*="Jarro"],
        .smart-image[alt*="Litro"],
        .smart-image[alt*="Growler"],
        .smart-image[alt*="Corona"],
        .smart-image[alt*="Clásico"] {
            object-position: center 30% !important;
        }
    }

    /* ===== ESTILOS ORIGINALES DE RECOMPENSAS ===== */
    .puntos-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        position: sticky;
        top: 10px;
        z-index: 100;
    }

    .puntos-disponibles {
        font-size: 2rem;
        font-weight: bold;
        margin: 0.5rem 0;
    }

    /* --------- Barra de Progreso --------- */
    .progress-container {
        background: rgba(255,255,255,0.2);
        border-radius: 20px;
        height: 40px;
        margin: 1.5rem 0;
        position: relative;
        overflow: visible;
        border: 2px solid rgba(255,255,255,0.3);
        padding: 0 15px;
    }

    .progress-bar-ruler {
        height: 100%;
        background: linear-gradient(90deg, #87CEEB, #4169E1, #1E90FF);
        border-radius: 18px;
        transition: width 0.5s ease;
        position: absolute;
        top: 0;
        left: 0;
        z-index: 2;
        box-shadow: 0 4px 15px rgba(65, 105, 225, 0.3);
    }

    .ruler-marks {
        position: absolute;
        top: 0;
        left: 15px;
        width: calc(100% - 30px);
        height: 100%;
        pointer-events: none;
        z-index: 3;
    }

    .ruler-mark {
        position: absolute;
        top: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        padding: 2px 0;
        transform: translateX(-50%);
    }

    .ruler-tick {
        width: 2px;
        height: 15px;
        background: rgba(255,255,255,0.8);
        border-radius: 1px;
        margin-top: 5px;
    }

    .ruler-mark.active .ruler-tick {
        background: rgba(255,255,255,1);
        box-shadow: 0 0 5px rgba(255,255,255,0.5);
    }

    .ruler-label {
        font-size: 0.7rem;
        font-weight: 600;
        color: rgba(255,255,255,0.9);
        background: rgba(0,0,0,0.3);
        padding: 1px 4px;
        border-radius: 3px;
        margin-top: 2px;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }

    .ruler-mark.active .ruler-label {
        color: white;
        background: rgba(0,0,0,0.5);
    }

    .current-position {
        position: absolute;
        top: -15px;
        transform: translateX(-50%);
        display: flex;
        flex-direction: column;
        align-items: center;
        pointer-events: none;
        z-index: 4;
        animation: pulseMarker 2s ease-in-out infinite;
    }

    .position-marker {
        width: 0;
        height: 0;
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        border-top: 12px solid #4169E1;
        filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
    }

    .position-label {
        background: #4169E1;
        color: white;
        padding: 4px 8px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
        margin-bottom: 2px;
        box-shadow: 0 2px 8px rgba(65, 105, 225, 0.4);
        white-space: nowrap;
    }

    @@keyframes pulseMarker {
        0%, 100% { transform: translateX(-50%) scale(1); }
        50% { transform: translateX(-50%) scale(1.1); }
    }

    /* --------- Grid de Recompensas --------- */
    .recompensas-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
    }

    .recompensa-card {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        position: relative;
        border: 2px solid transparent;
    }

    .recompensa-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    }

    .recompensa-card.selected {
        border: 2px solid #28a745;
        background: #f8fff9;
        transform: translateY(-3px);
    }

    .recompensa-card.no-disponible {
        opacity: 0.6;
        filter: grayscale(0.5);
    }

    .recompensa-contenido {
        padding: 1.5rem;
    }

    .recompensa-titulo {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .recompensa-descripcion {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    .recompensa-puntos {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 1rem;
    }

    .puntos-requeridos {
        font-size: 1.1rem;
        font-weight: bold;
        color: #667eea;
    }

    .estado-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .disponible-badge {
        background: #28a745;
        color: white;
    }

    .faltan-puntos-badge {
        background: #ffc107;
        color: #212529;
    }

    .recompensa-controls {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-top: 1rem;
    }

    /* --------- Checkbox Bootstrap Style --------- */
    .form-check {
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .form-check-input {
        margin: 0 !important;
        position: static !important;
        width: 16px;
        height: 16px;
    }

    .form-check-label {
        font-weight: 500;
        color: #495057;
        cursor: pointer;
        margin: 0;
        user-select: none;
        font-size: 0.875rem;
        line-height: 1;
    }

    .form-check:hover .form-check-label {
        color: #007bff;
    }

    .form-check-input:checked + .form-check-label {
        color: #007bff;
        font-weight: 600;
    }

    .form-check-input:disabled + .form-check-label {
        color: #6c757d;
        cursor: not-allowed;
        opacity: 0.6;
    }

    /* --------- Quantity Control --------- */
    .quantity-control {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .quantity-btn {
        background: #e9ecef;
        border: none;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-btn:hover:not(:disabled) {
        background: #28a745;
        color: white;
    }

    .quantity-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .quantity-input {
        width: 50px;
        text-align: center;
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 4px;
        font-weight: bold;
    }

    /* --------- Carrito Flotante --------- */
    .cart-container {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.15);
        padding: 20px;
        min-width: 300px;
        z-index: 1000;
        transition: all 0.3s ease;
        border: 2px solid #28a745;
    }

    .cart-container.hidden {
        opacity: 0;
        transform: translateY(100px);
        pointer-events: none;
    }

    .cart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
    }

    .cart-summary {
        text-align: center;
        margin-bottom: 15px;
    }

    .cart-total-puntos {
        font-size: 1.5rem;
        font-weight: bold;
        color: #e83e8c;
    }

    .cart-items-count {
        background: #28a745;
        color: white;
        border-radius: 12px;
        padding: 4px 8px;
        font-size: 0.8rem;
        margin-left: 10px;
    }

    .cart-status {
        padding: 8px 12px;
        border-radius: 8px;
        font-size: 0.9rem;
        margin-bottom: 15px;
        text-align: center;
    }

    .cart-status.valid {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .cart-status.invalid {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .btn-canjear-multiple {
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-canjear-multiple.enabled {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
    }

    .btn-canjear-multiple.enabled:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);
    }

    .btn-canjear-multiple.disabled {
        background: #e9ecef;
        color: #6c757d;
        cursor: not-allowed;
    }

    /* --------- Información adicional --------- */
    .siguiente-nivel {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 15px;
        margin-top: 3rem;
        text-align: center;
    }

    .siguiente-nivel h3 {
        color: #495057;
        margin-bottom: 1rem;
    }

    .siguiente-nivel p {
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    /* --------- Media Queries --------- */
    @@media (max-width: 768px) {
        .progress-container {
            height: 35px;
            margin: 1rem 0;
        }
        
        .ruler-label {
            font-size: 0.6rem;
            padding: 1px 2px;
        }
        
        .ruler-tick {
            height: 12px;
        }
        
        .position-label {
            font-size: 0.7rem;
            padding: 2px 6px;
        }
        
        .position-marker {
            border-left-width: 6px;
            border-right-width: 6px;
            border-top-width: 10px;
        }

        .recompensas-grid {
            grid-template-columns: 1fr;
        }

        .cart-container {
            right: 15px;
            left: 15px;
            min-width: auto;
        }
    }
</style>

<div class="container mt-4">
    <!-- Header con puntos disponibles -->
    <div class="puntos-header">
        <h1><i class="fas fa-gift"></i> Programa de Recompensas</h1>
        <div class="puntos-disponibles" id="puntos-disponibles">@Model.PuntosUsuario pts</div>
        <p>Selecciona las recompensas que deseas canjear</p>

        <!-- Barra de progreso -->
        <div class="progress-container">
            @{
                int maxPuntosRegla = 2000;
                double porcentajeProgreso = Math.Min(100, (double)Model.PuntosUsuario / maxPuntosRegla * 100);
                double anchoBarraAjustado = porcentajeProgreso;
                int siguienteNivel = ((Model.PuntosUsuario / 200) + 1) * 200;
                if (siguienteNivel > 2000) siguienteNivel = 2000;
                int puntosFaltantesProximoNivel = Math.Max(0, siguienteNivel - Model.PuntosUsuario);
                double posicionIndicador = porcentajeProgreso;
            }

            <div class="progress-bar-ruler" style="width: @anchoBarraAjustado%"></div>

            <!-- Marcas de la regla -->
            <div class="ruler-marks">
                @for (int i = 0; i <= 2000; i += 200)
                {
                    double posicion = (double)i / 2000 * 100;
                    bool esActivo = Model.PuntosUsuario >= i;

                    <div class="ruler-mark @(esActivo ? "active" : "")" style="left: @posicion%">
                        <div class="ruler-tick"></div>
                        <div class="ruler-label">@i</div>
                    </div>
                }
            </div>

            <div class="current-position" style="left: @porcentajeProgreso%">
                <div class="position-marker"></div>
                <div class="position-label">@Model.PuntosUsuario pts</div>
            </div>
        </div>
    </div>

    <!-- Mensajes de estado -->
    @if (TempData["Exito"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> @TempData["Exito"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Formulario para canje múltiple -->
    <form asp-action="CanjearMultiplesRecompensas" method="post" id="form-canje-multiple">
        @Html.AntiForgeryToken()

        <!-- Grid de recompensas -->
        <div class="recompensas-grid">
            @for (int i = 0; i < Model.ProductosRecompensa.Count; i++)
            {
                var recompensa = Model.ProductosRecompensa[i];
                bool puedeComprar = Model.PuntosUsuario >= recompensa.PuntosNecesarios;
                int puntosFaltantes = Math.Max(0, recompensa.PuntosNecesarios - Model.PuntosUsuario);

                <div class="recompensa-card @(!puedeComprar ? "no-disponible" : "")"
                     data-id="@recompensa.Id"
                     data-puntos="@recompensa.PuntosNecesarios"
                     data-nombre="@recompensa.Nombre">

                    <!-- ✅ IMAGEN INTELIGENTE MEJORADA -->
                    <div class="smart-image-container" data-category="@recompensa.Categoria.ToLower()">
                        @if (recompensa.Producto?.Imagen != null && recompensa.Producto.Imagen.Length > 0)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(recompensa.Producto.Imagen)" 
                                 alt="@recompensa.Nombre" 
                                 class="smart-image smart-image-loading"
                                 onload="handleSmartImageLoad(this)"
                                 onerror="handleSmartImageError(this)" />
                        }
                        else
                        {
                            <div class="smart-fallback">
                                <i class="fas fa-utensils"></i>
                            </div>
                        }
                    </div>

                    <div class="recompensa-contenido">
                        <h3 class="recompensa-titulo">@recompensa.Nombre</h3>
                        <p class="recompensa-descripcion">
                            @recompensa.Categoria - Valor original: $@recompensa.PrecioOriginal.ToString("F2")
                        </p>

                        <div class="recompensa-puntos">
                            <span class="puntos-requeridos">@recompensa.PuntosNecesarios pts</span>
                            @if (puedeComprar)
                            {
                                <span class="estado-badge disponible-badge">Disponible</span>
                            }
                            else
                            {
                                <span class="estado-badge faltan-puntos-badge">Te faltan @puntosFaltantes pts</span>
                            }
                        </div>

                        <!-- Controles de selección -->
                        <div class="recompensa-controls">
                            <div class="form-check">
                                <input type="checkbox"
                                       class="form-check-input"
                                       id="chk-@recompensa.Id"
                                       name="recompensasSeleccionadas[@i].Seleccionada"
                                       value="true"
                                       data-id="@recompensa.Id"
                                       @(!puedeComprar ? "disabled" : "") />
                                <label class="form-check-label" for="chk-@recompensa.Id">
                                    Seleccionar
                                </label>
                                <input type="hidden" name="recompensasSeleccionadas[@i].RecompensaId" value="@recompensa.Id" />
                            </div>

                            <div class="quantity-control">
                                <button type="button" class="quantity-btn decrease-btn" data-id="@recompensa.Id" @(!puedeComprar ? "disabled" : "")>−</button>
                                <input type="number"
                                       class="quantity-input"
                                       name="recompensasSeleccionadas[@i].Cantidad"
                                       value="1"
                                       min="1"
                                       max="10"
                                       data-id="@recompensa.Id"
                                       @(!puedeComprar ? "disabled" : "") />
                                <button type="button" class="quantity-btn increase-btn" data-id="@recompensa.Id" @(!puedeComprar ? "disabled" : "")>+</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </form>

    <!-- Carrito flotante -->
    <div class="cart-container hidden" id="cart-container">
        <div class="cart-header">
            <h5 class="mb-0">
                <i class="fas fa-shopping-cart"></i> Carrito de Recompensas
                <span class="cart-items-count" id="cart-count">0</span>
            </h5>
        </div>

        <div class="cart-summary">
            <div class="cart-total-puntos" id="cart-total">0 pts</div>
            <small class="text-muted">Total a canjear</small>
        </div>

        <div class="cart-status valid" id="cart-status">
            <i class="fas fa-check-circle"></i> Tienes suficientes puntos
        </div>

        <button type="submit"
                class="btn-canjear-multiple enabled"
                id="btn-canjear"
                form="form-canje-multiple"
                onclick="return confirmarCanje()">
            <i class="fas fa-gift"></i> Canjear Recompensas
        </button>

        <div class="text-center mt-2">
            <small class="text-muted">Puntos restantes: <span id="puntos-restantes">@Model.PuntosUsuario</span></small>
        </div>
    </div>

    <!-- Información adicional -->
    <div class="siguiente-nivel">
        <h3><i class="fas fa-info-circle"></i> ¿Cómo ganar más puntos?</h3>
        <p>Ganas <strong>30 puntos por cada dólar</strong> que gastes en tus pedidos.</p>
        <p>¡Sigue pidiendo tus platillos favoritos para acumular más puntos!</p>

        <div class="row mt-3">
            <div class="col-md-6 mb-2">
                <a href="@Url.Action("SeleccionMultiple", "Productos")" class="btn btn-primary btn-lg w-100">
                    <i class="fas fa-shopping-cart"></i> Hacer Pedido
                </a>
            </div>
            <div class="col-md-6 mb-2">
                <a href="@Url.Action("MisPuntos", "Fidelizacion")" class="btn btn-info btn-lg w-100">
                    <i class="fas fa-star"></i> Ver Mis Puntos
                </a>
            </div>
        </div>
    </div>
</div>

<script>
    // ===== SMART IMAGE ANALYZER MEJORADO PARA RECOMPENSAS =====
    class SmartImageAnalyzer {
        constructor() {
            this.fondoBlancoProductos = [
                'agua sin gas', 'agua mineral', 'limonada', 'limonada rosa',
                'té caliente', 'coca-cola', 'fanta', 'fioravanti', 'sprite',
                'café americano', 'capuccino', 'iced coffee', 'shot de aguardiente'
            ];

            this.fondoNegroProductos = [
                'cuba libre', 'whisky sour', 'whisky on the rocks'
            ];

            this.verticalProductos = [
                'cheddar', 'verace', 'jarro', 'litro', 'growler', 'corona', 'clásico',
                '3 jarros cerveza artesanal', 'botella de vino tinto', 'manaba mule',
                'botella de caña manabita', 'botella de antioqueño', 'botella de tequila',
                'mojito maracuyá', 'mojito frutos rojos', 'botella de ron abuelo',
                'gin tonic maracuyá', 'gin tonic frutos rojos', 'jager sour', 'jagerito'
            ];
        }

        analyzeAspectRatio(img) {
            const ratio = img.naturalWidth / img.naturalHeight;
            if (ratio >= 2.5) return 'ultra-wide';
            if (ratio >= 1.5) return 'wide';
            if (ratio >= 0.8 && ratio <= 1.2) return 'square';
            if (ratio >= 0.4) return 'tall';
            return 'ultra-tall';
        }

        analyzeQuality(img) {
            const pixels = img.naturalWidth * img.naturalHeight;
            const minDimension = Math.min(img.naturalWidth, img.naturalHeight);
            if (pixels < 10000 || minDimension < 100) return 'tiny';
            if (pixels < 50000 || minDimension < 200) return 'low';
            if (pixels > 500000 && minDimension > 800) return 'high';
            return 'medium';
        }

        analyzeContent(img) {
            const alt = (img.alt || '').toLowerCase();

            if (this.fondoBlancoProductos.some(producto => alt.includes(producto))) {
                return 'fondo-blanco';
            }

            if (this.fondoNegroProductos.some(producto => alt.includes(producto))) {
                return 'fondo-negro';
            }

            if (this.verticalProductos.some(producto => alt.includes(producto))) {
                return 'vertical-crop';
            }

            return 'generic';
        }

        applyOptimizations(img, container, content) {
            const productName = img.alt.toLowerCase();
            const dataName = productName.replace(/\s+/g, '-').replace(/[^\w-]/g, '');

            switch (content) {
                case 'fondo-blanco':
                    container.setAttribute('data-producto', dataName);
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = '#FFFFFF';
                    container.style.background = '#FFFFFF';
                    break;

                case 'fondo-negro':
                    container.setAttribute('data-producto', dataName);
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = '#000000';
                    container.style.background = '#000000';
                    break;

                case 'vertical-crop':
                    img.style.objectFit = 'cover';
                    img.style.objectPosition = 'center center';
                    img.style.background = 'transparent';
                    break;

                default:
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = 'white';
            }
        }
    }

    const smartAnalyzer = new SmartImageAnalyzer();

    function handleSmartImageLoad(img) {
        img.classList.remove('smart-image-loading');
        const container = img.closest('.smart-image-container');
        const content = smartAnalyzer.analyzeContent(img);
        
        smartAnalyzer.applyOptimizations(img, container, content);
        console.log(`Recompensa imagen analizada: ${img.alt} | ${content}`);
    }

    function handleSmartImageError(img) {
        const container = img.closest('.smart-image-container');
        container.innerHTML = '<div class="smart-fallback"><i class="fas fa-utensils"></i></div>';
    }

    // ===== JAVASCRIPT ORIGINAL DE RECOMPENSAS CONSERVADO =====
    document.addEventListener('DOMContentLoaded', function() {
        const PUNTOS_USUARIO = @Model.PuntosUsuario;
        const checkboxes = document.querySelectorAll('.form-check-input');
        const quantityInputs = document.querySelectorAll('.quantity-input');
        const decreaseBtns = document.querySelectorAll('.decrease-btn');
        const increaseBtns = document.querySelectorAll('.increase-btn');
        const cartContainer = document.getElementById('cart-container');
        const cartTotal = document.getElementById('cart-total');
        const cartCount = document.getElementById('cart-count');
        const cartStatus = document.getElementById('cart-status');
        const btnCanjear = document.getElementById('btn-canjear');
        const puntosRestantes = document.getElementById('puntos-restantes');

        function actualizarCarrito() {
            let totalPuntos = 0;
            let totalItems = 0;
            let recompensasSeleccionadas = [];

            checkboxes.forEach(checkbox => {
                if (checkbox.checked && !checkbox.disabled) {
                    const id = checkbox.dataset.id;
                    const card = checkbox.closest('.recompensa-card');
                    const puntosPorItem = parseInt(card.dataset.puntos);
                    const cantidad = parseInt(document.querySelector(`input[data-id="${id}"].quantity-input`).value);
                    
                    totalPuntos += puntosPorItem * cantidad;
                    totalItems += cantidad;
                    
                    recompensasSeleccionadas.push({
                        id: id,
                        nombre: card.dataset.nombre,
                        puntos: puntosPorItem,
                        cantidad: cantidad
                    });
                    
                    card.classList.add('selected');
                } else {
                    const card = checkbox.closest('.recompensa-card');
                    card.classList.remove('selected');
                }
            });

            // Actualizar UI del carrito
            cartTotal.textContent = totalPuntos + ' pts';
            cartCount.textContent = totalItems;
            puntosRestantes.textContent = PUNTOS_USUARIO - totalPuntos;

            // Validar si tiene suficientes puntos
            const tieneSuficientesPuntos = totalPuntos <= PUNTOS_USUARIO;
            
            if (totalItems === 0) {
                cartContainer.classList.add('hidden');
            } else {
                cartContainer.classList.remove('hidden');
                
                if (tieneSuficientesPuntos) {
                    cartStatus.className = 'cart-status valid';
                    cartStatus.innerHTML = '<i class="fas fa-check-circle"></i> Tienes suficientes puntos';
                    btnCanjear.className = 'btn-canjear-multiple enabled';
                    btnCanjear.disabled = false;
                } else {
                    cartStatus.className = 'cart-status invalid';
                    cartStatus.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Puntos insuficientes';
                    btnCanjear.className = 'btn-canjear-multiple disabled';
                    btnCanjear.disabled = true;
                }
            }
        }

        // Event listeners para checkboxes
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', actualizarCarrito);
        });

        // Event listeners para cantidad
        quantityInputs.forEach(input => {
            input.addEventListener('change', function() {
                let value = parseInt(this.value) || 1;
                this.value = Math.min(Math.max(value, 1), 10);
                actualizarCarrito();
            });
        });

        // Botones de incremento/decremento
        decreaseBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                if (this.disabled) return;
                const input = document.querySelector(`input[data-id="${this.dataset.id}"].quantity-input`);
                input.value = Math.max(1, parseInt(input.value) - 1);
                actualizarCarrito();
            });
        });

        increaseBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                if (this.disabled) return;
                const input = document.querySelector(`input[data-id="${this.dataset.id}"].quantity-input`);
                input.value = Math.min(10, parseInt(input.value) + 1);
                actualizarCarrito();
            });
        });

        // Inicializar
        actualizarCarrito();
    });

    function confirmarCanje() {
        const totalItems = parseInt(document.getElementById('cart-count').textContent);
        const totalPuntos = document.getElementById('cart-total').textContent;
        
        return confirm(`¿Estás seguro de canjear ${totalItems} recompensa(s) por ${totalPuntos}?`);
    }
</script>