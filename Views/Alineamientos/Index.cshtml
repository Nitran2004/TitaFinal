@model IEnumerable<ProyectoIdentity.Models.Alineamiento>

@{
    ViewData["Title"] = "Lista de Alineamientos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="text-center">Lista de Alineamientos</h1>

@if (User.IsInRole("Administrador"))
{
    <div class="row">
        <div class="col-sm-3 offset-9">
            <a asp-action="Create" class="btn btn-primary w-100">Crear Nuevo Alineamiento</a>
        </div>
    </div>
}

<form asp-controller="Alineamientos" asp-action="Index">
    <p>
        Buscar por Sigla AG01-AG13: <input type="text" name="buscar" class="form-text" />
        <input type="submit" value="Buscar" class="btn btn-sm btn-dark" />
    </p>
    <p>
        <input type="button" value="Reiniciar" onclick="resetSearch()" class="btn btn-sm btn-success" />
        <input type="button" value="Borrar Todo" onclick="confirmDeleteAll()" class="btn btn-sm btn-danger" />
    </p>
</form>

<table class="table" id="tablaAlineamientos">
    <thead>
        <tr>
            <th>Código</th>
            <th>Nivel de Importancia</th>
            <th>Sigla AG01-AG13</th>
            @if (User.IsInRole("Administrador"))
            {
                <th>Acciones</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr data-dominio="@item.SiglaAG01_AG13">
                <td>@Html.DisplayFor(modelItem => item.Codigo)</td>
                <td>@Html.DisplayFor(modelItem => item.Nivel)</td>
                <td>@Html.DisplayFor(modelItem => item.SiglaAG01_AG13)</td>
                @if (User.IsInRole("Administrador"))
                {
                    <td>
                        <button type="button" class="btn btn-warning" onclick="toggleMarkRow('@item.SiglaAG01_AG13')">Marcar/Desmarcar</button>
                        <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-warning">Editar</a>
                        <button type="button" class="btn btn-danger" onclick="confirmDelete('@item.ID', '@item.Codigo')">Borrar</button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script type="text/javascript">
        function confirmDelete(id, codigo) {
            if (confirm('¿Está seguro que desea borrar el alineamiento con código ' + codigo + '?')) {
                fetch('/Alineamientos/DeleteConfirmed/' + id, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            location.reload();
                        } else {
                            alert('Error al borrar el alineamiento.');
                        }
                    });
            }
        }

        function confirmDeleteAll() {
            if (confirm('¿Está seguro que desea borrar TODOS los alineamientos marcados?')) {
                let markedDominios = JSON.parse(localStorage.getItem('markedDominios')) || [];
                fetch('/Alineamientos/DeleteMarked', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify(markedDominios)
                })
                    .then(response => {
                        if (response.ok) {
                            location.reload();
                        } else {
                            alert('Error al borrar los alineamientos.');
                        }
                    });
            }
        }

        function toggleMarkRow(dominio) {
            let markedDominios = JSON.parse(localStorage.getItem('markedDominios')) || [];
            if (markedDominios.includes(dominio)) {
                markedDominios = markedDominios.filter(d => d !== dominio);
            } else {
                markedDominios.push(dominio);
            }
            localStorage.setItem('markedDominios', JSON.stringify(markedDominios));
            highlightRows();
        }

        function highlightRows() {
            const markedDominios = JSON.parse(localStorage.getItem('markedDominios')) || [];
            document.querySelectorAll('tr[data-dominio]').forEach(row => {
                const dominio = row.getAttribute('data-dominio');
                if (markedDominios.includes(dominio)) {
                    row.style.backgroundColor = 'lightgreen';
                    row.style.fontWeight = 'bold';
                } else {
                    row.style.backgroundColor = '';
                    row.style.fontWeight = '';
                }
            });
        }

        function resetSearch() {
            window.location.href = '/Alineamientos';
        }

        document.addEventListener("DOMContentLoaded", function () {
            highlightRows();
        });
    </script>
}
