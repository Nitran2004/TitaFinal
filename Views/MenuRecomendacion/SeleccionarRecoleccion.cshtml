@model IEnumerable<ProyectoIdentity.Models.CollectionPoint>
@{
    ViewBag.Title = "Seleccionar Punto";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int productoId = ViewBag.ProductoId ?? 0;
    string productoNombre = ViewBag.ProductoNombre ?? "Producto";
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-warning text-white">
            <h2>Selecciona punto de recolección</h2>
            <p class="mb-0">Para: <strong>@productoNombre</strong></p>
        </div>
        <div class="card-body">
            <!-- MENSAJE INICIAL -->
            <div id="locationRequired" class="alert alert-info">
                <i class="fas fa-map-marker-alt"></i>
                <strong>Detectando tu ubicación...</strong>
                <p class="mb-0">Acepta el permiso para calcular distancias.</p>
            </div>

            <!-- MENSAJE DE CARGA -->
            <div id="loadingLocation" style="display: none;">
                <div class="alert alert-warning">
                    <i class="fas fa-spinner fa-spin"></i> Obteniendo ubicación...
                </div>
            </div>

            <!-- MENSAJE DE ERROR -->
            <div id="locationError" style="display: none;"></div>

            <!-- Contenedor de puntos -->
            <div id="puntosContainer" style="display: none;">
                <div class="row">
                    @foreach (var punto in Model)
                    {
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5>@punto.Name</h5>
                                    <p>
                                        <strong>Sucursal:</strong> @punto.Sucursal.Nombre<br />
                                        <strong>Dirección:</strong> @punto.Address<br />
                                        <strong>Distancia:</strong>
                                        <span class="distance-value" data-id="@punto.Id" 
                                              data-lat="@punto.Sucursal.Latitud.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                                              data-lng="@punto.Sucursal.Longitud.ToString(System.Globalization.CultureInfo.InvariantCulture)">
                                            Calculando...
                                        </span>
                                    </p>
                                    
                                    <!-- FORMULARIO SIMPLE -->
                                    <form method="post" action="/MenuRecomendacion/ConfirmarRecoleccion">
                                        <input type="hidden" name="id" value="@punto.Id" />
                                        <input type="hidden" name="productoId" value="@productoId" />
                                        <input type="hidden" name="userLat" class="userLat-input" value="" />
                                        <input type="hidden" name="userLng" class="userLng-input" value="" />
                                        <input type="hidden" name="distancia" class="distancia-input" value="" />
                                        <button type="submit" class="btn btn-warning w-100">
                                            Seleccionar este punto
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-3">
                <a href="@Url.Action("Recomendacion", "MenuRecomendacion")" class="btn btn-outline-secondary">
                    Volver a Recomendaciones
                </a>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('🚀 Iniciando geolocalización');
            
            const locationRequired = document.getElementById('locationRequired');
            const loadingLocation = document.getElementById('loadingLocation');
            const locationError = document.getElementById('locationError');
            const puntosContainer = document.getElementById('puntosContainer');
            const distanceElements = document.querySelectorAll('.distance-value');
            const userLatInputs = document.querySelectorAll('.userLat-input');
            const userLngInputs = document.querySelectorAll('.userLng-input');
            const distanciaInputs = document.querySelectorAll('.distancia-input');

            // Función simple para calcular distancia
            function calcularDistancia(lat1, lon1, lat2, lon2) {
                const toRad = (deg) => deg * (Math.PI / 180);
                const R = 6371;
                const dLat = toRad(lat2 - lat1);
                const dLon = toRad(lon2 - lon1);
                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                return R * c;
            }

            // Actualizar distancias
            function actualizarDistancias(userLat, userLng) {
                console.log(`📍 Actualizando con: ${userLat}, ${userLng}`);

                // Llenar inputs
                userLatInputs.forEach(input => input.value = userLat);
                userLngInputs.forEach(input => input.value = userLng);

                // Calcular distancias
                distanceElements.forEach(function (element) {
                    const sucursalLat = parseFloat(element.getAttribute('data-lat'));
                    const sucursalLng = parseFloat(element.getAttribute('data-lng'));
                    const distancia = calcularDistancia(userLat, userLng, sucursalLat, sucursalLng);
                    const distanciaRedondeada = distancia.toFixed(2);

                    // Actualizar input de distancia del formulario correspondiente
                    const puntoId = element.getAttribute('data-id');
                    const form = element.closest('.card-body').querySelector('form');
                    const distanciaInput = form.querySelector('.distancia-input');
                    if (distanciaInput) {
                        distanciaInput.value = distanciaRedondeada;
                    }

                    // Mostrar distancia sin emojis
                    element.innerHTML = `${distanciaRedondeada} km`;
                });

                // Mostrar puntos
                locationRequired.style.display = 'none';
                loadingLocation.style.display = 'none';
                locationError.style.display = 'none';
                puntosContainer.style.display = 'block';
            }

            // Obtener ubicación
            function obtenerUbicacion() {
                locationRequired.style.display = 'none';
                loadingLocation.style.display = 'block';

                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        function (position) {
                            console.log('✅ Ubicación obtenida');
                            actualizarDistancias(position.coords.latitude, position.coords.longitude);
                        },
                        function (error) {
                            console.log('❌ Error, usando ubicación por defecto');
                            loadingLocation.style.display = 'none';
                            locationError.innerHTML = `
                                <div class="alert alert-warning">
                                    <strong>No se pudo obtener tu ubicación.</strong> 
                                    Usando ubicación de Quito por defecto.
                                    <button onclick="obtenerUbicacion()" class="btn btn-sm btn-warning ms-2">Reintentar</button>
                                </div>
                            `;
                            locationError.style.display = 'block';
                            // Usar Quito como ubicación por defecto
                            actualizarDistancias(-0.1857, -78.4678);
                        },
                        { enableHighAccuracy: true, timeout: 10000, maximumAge: 60000 }
                    );
                } else {
                    console.log('❌ Geolocalización no soportada');
                    actualizarDistancias(-0.1857, -78.4678);
                }
            }

            // Hacer función global
            window.obtenerUbicacion = obtenerUbicacion;

            // Iniciar
            obtenerUbicacion();
        });
    </script>
}

@section styles {
    <style>
        .btn-warning {
            color: #fff;
            background-color: #F2A900;
            border-color: #F2A900;
        }
        .btn-warning:hover {
            background-color: #e09600;
            border-color: #d48e00;
        }
        .fa-spinner { animation: spin 1s linear infinite; }
        @@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
}