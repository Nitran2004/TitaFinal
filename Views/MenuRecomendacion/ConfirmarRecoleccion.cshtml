@model ProyectoIdentity.Models.CollectionPoint
@{
    ViewData["Title"] = "Confirmar Punto de Recolección";

    // Valores por defecto para Quito si no hay coordenadas
    if (ViewBag.UserLat == null)
    {
        ViewBag.UserLat = -0.1857;
    }

    if (ViewBag.UserLng == null)
    {
        ViewBag.UserLng = -78.4954;
    }

    if (ViewBag.Distancia == null)
    {
        ViewBag.Distancia = 3.5;
    }

    // Es crucial obtener el ID del punto de recolección
    int puntoRecoleccionId = ViewBag.PuntoRecoleccionId ?? 0;

    // Obtener el ID del producto
    int productoId = ViewBag.ProductoId ?? 0;
    bool esPersonalizacion = false; // Para MenuRecomendacion siempre false

    // Formatear la distancia para que siempre muestre el punto decimal
    string distanciaFormateada = string.Format("{0:0.00}", ViewBag.Distancia);
}

<div class="container mt-4">
    <!-- Mostrar mensajes de error si existen -->
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card">
        <div class="card-header bg-success text-white">
            <h2 class="mb-0">Confirma tu punto de recolección</h2>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Detalles del punto de recolección</h5>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@Model.Name</h5>
                            <p class="card-text">
                                <strong>Sucursal:</strong> @Model.Sucursal.Nombre<br />
                                <strong>Dirección:</strong> @Model.Address<br />
                            </p>
                            <p class="card-text">
                                <strong>Distancia:</strong>
                                <span id="distancia-display" class="text-info">
                                    <i class="fas fa-spinner fa-spin"></i> Calculando...
                                </span>
                            </p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle"></i>
                                <text>Instrucciones</text>
                            </h5>
                        </div>
                        <div class="card-body">
                            <p>Una vez confirmes tu pedido:</p>
                            <ul>
                                <li>Recibirás una confirmación con el número de tu pedido</li>
                                <li>Podrás recoger tu pedido en el punto seleccionado en aproximadamente 20-30 minutos</li>
                                <li>Cuando llegues, menciona el número de tu pedido</li>
                            </ul>

                            <div id="distancia-warning" class="alert alert-warning mt-3" style="display: none;">
                                <i class="fas fa-exclamation-triangle"></i>
                                <strong>Nota:</strong> Te encuentras a más de 5 km de distancia.
                                Considera el tiempo de viaje para recoger tu pedido.
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4 d-flex justify-content-between">
                <a href="@Url.Action("SeleccionarRecoleccion", "MenuRecomendacion", new { productoId })"
                   class="btn btn-outline-secondary navigation-btn">
                    <i class="fas fa-arrow-left"></i> Elegir otro punto
                </a>

                <!-- Solo cambié esto para MenuRecomendacion -->
                <form asp-action="ContinuarConDetalle" asp-controller="MenuRecomendacion" method="post" id="formContinuar">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="puntoRecoleccionId" value="@puntoRecoleccionId" />
                    <input type="hidden" name="productoId" value="@productoId" />
                    <button type="submit" class="btn btn-success" id="btnContinuar">
                        <i class="fas fa-arrow-right"></i> Continuar con el producto
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Función para calcular la distancia (misma que en SeleccionarRecoleccion)
            function calcularDistancia(lat1, lon1, lat2, lon2) {
                lat1 = parseFloat(String(lat1).replace(',', '.'));
                lon1 = parseFloat(String(lon1).replace(',', '.'));
                lat2 = parseFloat(String(lat2).replace(',', '.'));
                lon2 = parseFloat(String(lon2).replace(',', '.'));

                console.log(`Calculando distancia entre: (${lat1}, ${lon1}) y (${lat2}, ${lon2})`);

                if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) {
                    console.error("Coordenadas inválidas", { lat1, lon1, lat2, lon2 });
                    return 0;
                }

                const toRad = function (deg) {
                    return deg * (Math.PI / 180);
                };

                const R = 6371; // Radio de la Tierra en kilómetros
                const dLat = toRad(lat2 - lat1);
                const dLon = toRad(lon2 - lon1);

                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);

                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                const distance = R * c;

                console.log(`Distancia calculada: ${distance} km`);
                return distance;
            }

            // Función para actualizar la visualización de la distancia
            function actualizarDistanciaEnVista(distancia) {
                const distanciaDisplay = document.getElementById('distancia-display');
                const distanciaWarning = document.getElementById('distancia-warning');
                
                if (distanciaDisplay) {
                    const distanciaRedondeada = distancia.toFixed(2);
                    
                    // Limpiar clases existentes
                    distanciaDisplay.classList.remove('text-success', 'text-warning', 'text-danger', 'text-info');
                    
                    // Aplicar estilo y contenido según la distancia
                    if (distancia < 3) {
                        distanciaDisplay.classList.add('text-success');
                        distanciaDisplay.innerHTML = `${distanciaRedondeada} km <i class="fas fa-check-circle"></i>`;
                    } else if (distancia < 7) {
                        distanciaDisplay.classList.add('text-warning');
                        distanciaDisplay.innerHTML = `${distanciaRedondeada} km`;
                    } else {
                        distanciaDisplay.classList.add('text-danger');
                        distanciaDisplay.innerHTML = `${distanciaRedondeada} km`;
                    }
                }

                // Mostrar/ocultar warning si está a más de 5 km
                if (distanciaWarning) {
                    if (distancia > 5) {
                        distanciaWarning.style.display = 'block';
                    } else {
                        distanciaWarning.style.display = 'none';
                    }
                }
            }

            // Obtener ubicación y recalcular distancia
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function (position) {
                        const userLat = position.coords.latitude;
                        const userLng = position.coords.longitude;
                        
                        // Coordenadas de la sucursal
                        const sucursalLat = @Model.Sucursal.Latitud.ToString(System.Globalization.CultureInfo.InvariantCulture);
                        const sucursalLng = @Model.Sucursal.Longitud.ToString(System.Globalization.CultureInfo.InvariantCulture);
                        
                        // Calcular distancia
                        const distanciaCalculada = calcularDistancia(userLat, userLng, sucursalLat, sucursalLng);
                        console.log(`Distancia recalculada en confirmación: ${distanciaCalculada.toFixed(2)} km`);
                        
                        // Actualizar la vista con la distancia correcta
                        actualizarDistanciaEnVista(distanciaCalculada);
                    },
                    function (error) {
                        console.log("Error obteniendo ubicación en confirmación:", error);
                        
                        // Si no se puede obtener la ubicación, mostrar mensaje de error
                        const distanciaDisplay = document.getElementById('distancia-display');
                        if (distanciaDisplay) {
                            distanciaDisplay.innerHTML = '<i class="fas fa-exclamation-triangle text-warning"></i> No se pudo calcular la distancia';
                        }
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 15000,
                        maximumAge: 0
                    }
                );
            } else {
                // Geolocalización no disponible
                const distanciaDisplay = document.getElementById('distancia-display');
                if (distanciaDisplay) {
                    distanciaDisplay.innerHTML = '<i class="fas fa-times text-danger"></i> Geolocalización no disponible';
                }
            }

            // Código existente del formulario
            const form = document.getElementById('formContinuar');
            if (form) {
                form.addEventListener('submit', function (e) {
                    const confirmacion = confirm("¿Deseas continuar con el pedido?");
                    if (!confirmacion) {
                        e.preventDefault();
                        return false;
                    }
                    return true;
                });
            }
        });
    </script>
}

@section styles {
    <style>
        .navigation-btn {
            color: #6c757d !important;
            border-color: #6c757d !important;
            background-color: transparent !important;
            border-width: 2px !important;
            display: inline-flex !important;
            align-items: center !important;
            padding: 10px 20px !important;
        }

        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

            .btn-success:hover {
                background-color: #218838;
                border-color: #1e7e34;
            }

        /* Estilos para el indicador de carga */
        .fa-spinner {
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
}