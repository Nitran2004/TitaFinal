@model List<ProyectoIdentity.Models.Producto>
@{
    ViewBag.Title = "Personalización de productos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* ===== SMART IMAGE POSITIONING SYSTEM BASE ===== */
    .smart-image-container {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
        background: linear-gradient(45deg, #f8f9fa, #e9ecef);
        width: 100%;
        height: 180px;
    }

    .smart-image {
        width: 100%;
        height: 100%;
        transition: all 0.3s ease;
        object-fit: contain;
        object-position: center center;
        background: white;
    }

    /* Loading state */
    .smart-image-loading {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-shimmer 1.5s infinite;
    }
    
    @@keyframes loading-shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }

    /* Efectos hover inteligentes */
    .smart-image-container:hover .smart-image {
        transform: scale(1.05);
    }

    /* Fallback para cuando no hay imagen */
    .smart-fallback {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: white;
        font-size: 3rem;
        background: linear-gradient(45deg, #667eea, #764ba2);
    }

    /* ===== IMÁGENES VERTICALES QUE DEBEN SER HORIZONTALES (CROP) ===== */
    .smart-image[alt*="Cheddar"],
    .smart-image[alt*="Verace"],
    .smart-image[alt*="Jarro"],
    .smart-image[alt*="Litro"],
    .smart-image[alt*="Growler"],
    .smart-image[alt*="Corona"],
    .smart-image[alt*="Clásico"],
    .smart-image[alt*="3 jarros cerveza artesanal"],
    .smart-image[alt*="Botella de vino tinto"],
    .smart-image[alt*="Manaba mule"],
    .smart-image[alt*="Botella de caña manabita"],
    .smart-image[alt*="Botella de Antioqueño"],
    .smart-image[alt*="Botella de tequila"],
    .smart-image[alt*="Mojito maracuyá"],
    .smart-image[alt*="Mojito frutos rojos"],
    .smart-image[alt*="Botella de Ron Abuelo"],
    .smart-image[alt*="Gin Tonic Maracuyá"],
    .smart-image[alt*="Gin Tonic Frutos rojos"],
    .smart-image[alt*="Jager Sour"],
    .smart-image[alt*="Jagerito"] {
        object-fit: cover !important;
        object-position: center center !important;
        background: transparent !important;
    }

    /* ===== IMÁGENES CON FONDO BLANCO QUE DEBEN RELLENAR EL FONDO ===== */
    .smart-image[alt*="Agua sin gas"],
    .smart-image[alt*="Agua mineral"],
    .smart-image[alt*="Limonada"],
    .smart-image[alt*="Limonada Rosa"],
    .smart-image[alt*="Té caliente"],
    .smart-image[alt*="Coca-Cola"],
    .smart-image[alt*="Fanta"],
    .smart-image[alt*="Fioravanti"],
    .smart-image[alt*="Sprite"],
    .smart-image[alt*="Café americano"],
    .smart-image[alt*="Capuccino"],
    .smart-image[alt*="Iced Coffee"],
    .smart-image[alt*="Shot de aguardiente"] {
        object-fit: contain !important;
        object-position: center center !important;
        background: #FFFFFF !important;
    }

    /* ===== CONTENEDORES PARA IMÁGENES CON FONDO BLANCO ===== */
    .smart-image-container:has(.smart-image[alt*="Agua sin gas"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Agua mineral"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Limonada"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Limonada Rosa"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Té caliente"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Coca-Cola"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Fanta"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Fioravanti"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Sprite"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Café americano"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Capuccino"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Iced Coffee"]) {
        background: #FFFFFF !important;
    }

    .smart-image-container:has(.smart-image[alt*="Shot de aguardiente"]) {
        background: #FFFFFF !important;
    }

    /* ===== IMÁGENES CON FONDO NEGRO ===== */
    .smart-image[alt*="Cuba libre"],
    .smart-image[alt*="Whisky Sour"],
    .smart-image[alt*="Whisky on the rocks"] {
        object-fit: contain !important;
        object-position: center center !important;
        background: #000000 !important;
    }

    /* ===== CONTENEDORES PARA IMÁGENES CON FONDO NEGRO ===== */
    .smart-image-container:has(.smart-image[alt*="Cuba libre"]) {
        background: #000000 !important;
    }

    .smart-image-container:has(.smart-image[alt*="Whisky Sour"]) {
        background: #000000 !important;
    }

    .smart-image-container:has(.smart-image[alt*="Whisky on the rocks"]) {
        background: #000000 !important;
    }

    /* ===== FALLBACK PARA NAVEGADORES QUE NO SOPORTAN :has() ===== */
    .smart-image-container[data-producto="agua-sin-gas"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="agua-mineral"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="limonada"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="limonada-rosa"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="te-caliente"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="coca-cola"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="fanta"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="fioravanti"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="sprite"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="cafe-americano"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="capuccino"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="iced-coffee"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="shot-aguardiente"] {
        background: #FFFFFF !important;
    }

    .smart-image-container[data-producto="cuba-libre"] {
        background: #000000 !important;
    }

    .smart-image-container[data-producto="whisky-sour"] {
        background: #000000 !important;
    }

    .smart-image-container[data-producto="whisky-on-the-rocks"] {
        background: #000000 !important;
    }

    /* ===== AJUSTE ESPECIAL PARA MÓVIL ===== */
    @@media (max-width: 768px) {
        .smart-image[alt*="Cheddar"],
        .smart-image[alt*="Verace"],
        .smart-image[alt*="Jarro"],
        .smart-image[alt*="Litro"],
        .smart-image[alt*="Growler"],
        .smart-image[alt*="Corona"],
        .smart-image[alt*="Clásico"] {
            object-position: center 30% !important;
        }
    }

    /* --------- Menú de Categorías --------- */
    .category-nav {
        position: sticky;
        top: 0;
        background: #fff;
        padding: 8px 0;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        z-index: 100;
    }

    .category-container {
        display: flex;
        overflow-x: auto;
        gap: 16px;
        padding: 0 24px;
        scroll-behavior: smooth;
        justify-content: center;
        margin: 0 auto;
        max-width: 900px; 
    }
    .category-container::-webkit-scrollbar { height:6px; }
    .category-container::-webkit-scrollbar-thumb { background: rgba(0,0,0,0.2); border-radius:3px; }
    
    .category-btn {
        flex:0 0 auto; display:flex; flex-direction:column; align-items:center;
        border:none; background:transparent; cursor:pointer;
        padding:6px 12px; transition:color .2s,transform .2s; color:#555;
        text-decoration: none !important;
    }
    .category-btn i { font-size:1.4rem; margin-bottom:4px; transition:transform .2s; }
    .category-btn span { font-size:.85rem; white-space:nowrap; }
    .category-btn.active,
    .category-btn:hover { color:#28a745; transform:translateY(-3px); text-decoration: none !important; }
    .category-btn.active i,
    .category-btn:hover i { transform:scale(1.2); }
    .category-btn.active::after {
        content:''; display:block; width:100%; height:3px;
        background:linear-gradient(90deg,#ffc107,#28a745);
        border-radius:2px; margin-top:6px; animation:indicator-in .3s ease-out;
    }
    @@keyframes indicator-in { from{width:0} to{width:100%} }
    @@media(max-width:576px){ .category-btn i{font-size:1.2rem} .category-btn span{font-size:.75rem} }

    /* --------- Grid de Productos --------- */
    .product-grid {
        display:grid;
        grid-template-columns:repeat(auto-fill,minmax(260px,1fr));
        gap:24px;
        margin:24px 0;
    }
    .product-card {
        background:#fff; border-radius:12px; overflow:hidden;
        box-shadow:0 4px 12px rgba(0,0,0,0.08);
        transition:transform .3s,box-shadow .3s; position:relative;
        height: 100%;
    }
    .product-card:hover { transform:translateY(-5px); box-shadow:0 8px 24px rgba(0,0,0,0.1); }
    
    .card-body {
        padding:16px; text-align:center; display: flex; flex-direction: column; height: calc(100% - 180px);
    }
    .product-name {
        font-size:1.15rem; font-weight:600; color:#212529; margin:8px 0 4px;
    }
    .product-price {
        font-size:1rem; font-weight:700; color:#e83e8c; margin-bottom:8px;
    }
    .product-description {
        font-size:0.9rem; color:#6c757d; margin-bottom:12px; flex-grow: 1;
    }
    
    /* ✅ Estilos para los botones con validaciones */
    .btn-seleccionar {
        background-color: #F2A900;
        border-color: #F2A900;
        color: #fff;
        border: none;
        border-radius: 6px;
        padding: 8px 12px;
        font-size: 0.9rem;
        transition: all 0.2s;
        display: inline-block;
        width: 100%;
        text-decoration: none !important;
        cursor: pointer;
    }

    .btn-seleccionar:hover:not(:disabled) {
        background-color: #e09600;
        border-color: #d48e00;
        color: #fff;
        transform: translateY(-2px);
        text-decoration: none !important;
    }

    .btn-seleccionar:disabled {
        background-color: #6c757d;
        border-color: #6c757d;
        color: #fff;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .btn-seleccionar.btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
        color: #212529;
    }

    .btn-seleccionar.btn-warning:hover {
        background-color: #e0a800;
        border-color: #d39e00;
        color: #212529;
    }

    .btn-seleccionar i {
        margin-right: 5px;
    }

    /* ✅ Estilos para información de límites */
    .points-info {
        background: #f8f9fa;
        padding: 8px;
        border-radius: 5px;
        border-left: 3px solid #28a745;
        margin-bottom: 12px;
        font-size: 0.85rem;
    }
</style>

<h1 class="text-center mt-4">@(string.IsNullOrEmpty(ViewBag.CategoriaActual) || ViewBag.CategoriaActual.ToLower() == "todas" ? "Personalización de productos" : $"{ViewBag.CategoriaActual} - Personalizable")</h1>

<!-- ✅ ESTADO UNIFICADO DE PRODUCTOS -->
<div class="container mt-4">
    <div id="estado-unificado" class="alert alert-info" style="display: none;">
        <h6><i class="fas fa-info-circle"></i> Estado unificado de productos</h6>
        <div class="row">
            <div class="col-md-4">
                <strong>Disponibles:</strong> <span id="disponibles-count">-</span> producto(s) más
            </div>
            <div class="col-md-4">
                <strong>En pedidos activos:</strong> <span id="activos-count">-</span>
            </div>
            <div class="col-md-4">
                <strong>En ambos carritos:</strong> <span id="carritos-count">-</span> productos
            </div>
        </div>
        <small class="text-muted d-block mt-2">
            <em>Límite compartido entre personalización y recomendación IA: <span id="limite-info">0/3</span> productos</em>
        </small>
    </div>
</div>

<nav class="category-nav">
    <div class="category-container">
        <a href="@Url.Action("Index", new { categoria = "todas" })" 
           class="category-btn @(ViewBag.CategoriaActual?.ToLower() == "todas" ? "active" : "")">
            <i class="fas fa-layer-group"></i>
            <span>Todas</span>
        </a>
        @if (ViewBag.Categorias != null)
        {
            @foreach (var categoria in ViewBag.Categorias)
            {
                <a href="@Url.Action("Index", new { categoria = categoria })" 
                   class="category-btn @(ViewBag.CategoriaActual?.ToLower() == categoria.ToLower() ? "active" : "")">
                    <i class="@GetCategoryIcon(categoria)"></i>
                    <span>@categoria</span>
                </a>
            }
        }
    </div>
</nav>

<div class="container">
    <div class="product-grid">
        @if (Model.Any())
        {
            @foreach (var producto in Model)
            {
                <div class="product-card" data-categoria="@producto.Categoria.ToLower()">
                    <div class="smart-image-container" data-category="@producto.Categoria.ToLower()">
                        @if (producto.Imagen != null)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(producto.Imagen)"
                                 alt="@producto.Nombre" 
                                 class="smart-image smart-image-loading"
                                 onload="handleSmartImageLoad(this)"
                                 onerror="handleSmartImageError(this)" />
                        }
                        else
                        {
                            <div class="smart-fallback">
                                <i class="fas fa-utensils"></i>
                            </div>
                        }
                    </div>

                    <div class="card-body">
                        <div class="product-name">@producto.Nombre</div>
                        <div class="product-price">$@producto.Precio.ToString("F2")</div>
                        <p class="product-description">@producto.Descripcion</p>
                        
                        <div class="points-info">
                            <small class="text-success">
                                <i class="fas fa-star"></i> Ganas @((int)(producto.Precio * 30)) puntos
                            </small>
                        </div>
                        
                        <div class="mt-auto">
                            <!-- ✅ BOTÓN CON VALIDACIÓN DE LÍMITES -->
                            <button type="button" 
                                    class="btn-seleccionar" 
                                    data-producto-id="@producto.Id"
                                    onclick="validarYSeleccionar(@producto.Id)">
                                <i class="fas fa-cog"></i> Seleccionar
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info">
                    <h5>No hay productos disponibles</h5>
                    <p>No se encontraron productos para la categoría seleccionada.</p>
                    <a href="@Url.Action("Index", new { categoria = "todas" })" class="btn btn-primary">
                        Ver todos los productos
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<!-- ✅ MODAL PARA MOSTRAR LÍMITE ALCANZADO -->
<div class="modal fade" id="modalLimiteAlcanzado" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle"></i> Límite de Productos Alcanzado
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="mensaje-limite-content">
                    <!-- Contenido dinámico -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Entendido</button>
                <a href="@Url.Action("VerCarrito")" class="btn btn-primary">
                    Ver carrito actual
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // ===== SMART IMAGE ANALYZER MEJORADO =====
    class SmartImageAnalyzer {
        constructor() {
            this.fondoBlancoProductos = [
                'agua sin gas', 'agua mineral', 'limonada', 'limonada rosa',
                'té caliente', 'coca-cola', 'fanta', 'fioravanti', 'sprite',
                'café americano', 'capuccino', 'iced coffee', 'shot de aguardiente'
            ];

            this.fondoNegroProductos = [
                'cuba libre', 'whisky sour', 'whisky on the rocks'
            ];

            this.verticalProductos = [
                'cheddar', 'verace', 'jarro', 'litro', 'growler', 'corona', 'clásico',
                '3 jarros cerveza artesanal', 'botella de vino tinto', 'manaba mule',
                'botella de caña manabita', 'botella de antioqueño', 'botella de tequila',
                'mojito maracuyá', 'mojito frutos rojos', 'botella de ron abuelo',
                'gin tonic maracuyá', 'gin tonic frutos rojos', 'jager sour', 'jagerito'
            ];
        }

        analyzeContent(img) {
            const alt = (img.alt || '').toLowerCase();

            if (this.fondoBlancoProductos.some(producto => alt.includes(producto))) {
                return 'fondo-blanco';
            }

            if (this.fondoNegroProductos.some(producto => alt.includes(producto))) {
                return 'fondo-negro';
            }

            if (this.verticalProductos.some(producto => alt.includes(producto))) {
                return 'vertical-crop';
            }

            return 'generic';
        }

        applyOptimizations(img, container, content) {
            const productName = img.alt.toLowerCase();
            const dataName = productName.replace(/\s+/g, '-').replace(/[^\w-]/g, '');

            switch (content) {
                case 'fondo-blanco':
                    container.setAttribute('data-producto', dataName);
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = '#FFFFFF';
                    container.style.background = '#FFFFFF';
                    break;

                case 'fondo-negro':
                    container.setAttribute('data-producto', dataName);
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = '#000000';
                    container.style.background = '#000000';
                    break;

                case 'vertical-crop':
                    img.style.objectFit = 'cover';
                    img.style.objectPosition = 'center center';
                    img.style.background = 'transparent';
                    break;

                default:
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = 'white';
            }
        }
    }

    const smartAnalyzer = new SmartImageAnalyzer();

    function handleSmartImageLoad(img) {
        img.classList.remove('smart-image-loading');
        const container = img.closest('.smart-image-container');
        const content = smartAnalyzer.analyzeContent(img);
        
        smartAnalyzer.applyOptimizations(img, container, content);
        console.log(`Imagen analizada: ${img.alt} | ${content}`);
    }

    function handleSmartImageError(img) {
        const container = img.closest('.smart-image-container');
        container.innerHTML = '<div class="smart-fallback"><i class="fas fa-utensils"></i></div>';
    }

    // ✅ VARIABLES GLOBALES PARA LÍMITES CORREGIDAS - LÍMITE VISUAL SIEMPRE 3
    let limitesActuales = {
        productosActivos: 0,        
        limite: 3,                  // ✅ LÍMITE VISUAL SIEMPRE 3
        disponibles: 3,             // ✅ DISPONIBLES MÁXIMO 3
        productosEnCarritos: 0,     
        totalOcupados: 0,
        permitido: true,
        mensaje: ""
    };

    // ✅ FUNCIÓN PARA CARGAR LÍMITES CON LÍMITE VISUAL FIJO DE 3
    async function cargarEstadoUnificado() {
        try {
            const response = await fetch('@Url.Action("ObtenerLimitesProductos")');
            const data = await response.json();

            console.log('[DEBUG] Datos recibidos:', data);

            // ✅ TOMAR DATOS DEL BACKEND PERO APLICAR LÍMITE VISUAL DE 3
            const productosActivos = data.productosActivos || 0;
            const productosCarritos = data.productosEnCarritos || 0;
            const limiteBackend = data.limite || 4;  // Backend puede seguir usando 4
            const disponiblesBackend = data.disponibles || 0;
            const totalOcupados = productosActivos + productosCarritos;

            // ✅ APLICAR LÍMITE VISUAL DE 3 PARA TODO
            const LIMITE_VISUAL = 3;
            const productosActivosVisual = Math.min(LIMITE_VISUAL, productosActivos);
            const productosCarritosVisual = Math.min(LIMITE_VISUAL, productosCarritos);
            const totalVisual = productosActivosVisual + productosCarritosVisual;
            const disponiblesVisual = Math.max(0, LIMITE_VISUAL - totalVisual);

            // ✅ DETERMINAR SI ESTÁ PERMITIDO BASADO EN LÍMITE VISUAL
            const permitidoVisual = totalVisual < LIMITE_VISUAL;

            // ✅ ACTUALIZAR VARIABLES GLOBALES CON LÍMITE VISUAL DE 3
            limitesActuales = {
                productosActivos: productosActivosVisual,
                limite: LIMITE_VISUAL,  // ✅ SIEMPRE 3
                disponibles: disponiblesVisual,
                productosEnCarritos: productosCarritosVisual,
                totalOcupados: totalVisual,
                permitido: permitidoVisual,
                mensaje: data.mensaje || ""
            };

            // ✅ ACTUALIZAR INTERFAZ CON VALORES VISUALES (LÍMITE 3)
            document.getElementById('disponibles-count').textContent = disponiblesVisual;
            document.getElementById('activos-count').textContent = productosActivosVisual + '/' + LIMITE_VISUAL;
            document.getElementById('carritos-count').textContent = productosCarritosVisual;
            document.getElementById('limite-info').textContent = totalVisual + '/' + LIMITE_VISUAL;

            // ✅ MOSTRAR/OCULTAR Y CAMBIAR COLOR SEGÚN ESTADO
            const estadoElement = document.getElementById('estado-unificado');

            if (totalVisual > 0) {
                estadoElement.style.display = 'block';

                // ✅ LÓGICA BASADA EN LÍMITE VISUAL DE 3
                if (totalVisual >= LIMITE_VISUAL) {
                    estadoElement.className = 'alert alert-danger';
                    // ✅ DESHABILITAR TODOS LOS BOTONES
                    document.querySelectorAll('.btn-seleccionar').forEach(btn => {
                        btn.disabled = true;
                        btn.innerHTML = '<i class="fas fa-ban"></i> Límite Alcanzado';
                        btn.className = 'btn-seleccionar btn-secondary';
                    });
                } else if (disponiblesVisual <= 1) {
                    estadoElement.className = 'alert alert-warning';
                    // ✅ MANTENER BOTONES HABILITADOS PERO CON WARNING
                    document.querySelectorAll('.btn-seleccionar').forEach(btn => {
                        btn.disabled = false;
                        btn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Último espacio';
                        btn.className = 'btn-seleccionar btn-warning';
                    });
                } else {
                    estadoElement.className = 'alert alert-info';
                    // ✅ BOTONES NORMALES
                    document.querySelectorAll('.btn-seleccionar').forEach(btn => {
                        btn.disabled = false;
                        btn.innerHTML = '<i class="fas fa-cog"></i> Personalizar';
                        btn.className = 'btn-seleccionar';
                    });
                }
            } else {
                // ✅ OCULTAR CUANDO NO HAY PRODUCTOS
                estadoElement.style.display = 'none';
                // ✅ BOTONES NORMALES
                document.querySelectorAll('.btn-seleccionar').forEach(btn => {
                    btn.disabled = false;
                    btn.innerHTML = '<i class="fas fa-cog"></i> Personalizar';
                    btn.className = 'btn-seleccionar';
                });
            }

            console.log('[DEBUG] Estado unificado actualizado:', limitesActuales);
            console.log(`[DEBUG] Visual: ${disponiblesVisual} disponibles, ${totalVisual}/3 ocupados`);
        } catch (error) {
            console.error('Error al cargar estado unificado:', error);
            // ✅ VALORES POR DEFECTO SEGUROS CON LÍMITE 3
            limitesActuales = {
                productosActivos: 0,
                limite: 3,  // ✅ LÍMITE VISUAL 3
                disponibles: 3,
                productosEnCarritos: 0,
                totalOcupados: 0,
                permitido: true,
                mensaje: ""
            };
        }
    }

    // ✅ FUNCIÓN PARA VALIDAR Y SELECCIONAR PRODUCTO CON LÍMITE VISUAL DE 3
    async function validarYSeleccionar(productoId) {
        console.log(`[DEBUG] Validando selección para producto ${productoId}`);

        // Recargar límites antes de validar
        await cargarEstadoUnificado();

        // ✅ USAR LÍMITE VISUAL DE 3
        if (limitesActuales.totalOcupados >= 3) {
            console.log('[DEBUG] Límite de 3 productos alcanzado - mostrando modal');
            mostrarModalLimite();
            return false;
        }

        if (limitesActuales.disponibles === 0) {
            console.log('[DEBUG] Sin productos disponibles - mostrando modal');
            mostrarModalLimite();
            return false;
        }

        console.log('[DEBUG] Validación pasada - redirigiendo');
        // Si hay espacio disponible, continuar con la selección
        window.location.href = '@Url.Action("IniciarPersonalizacion")?id=' + productoId;
    }

    // ✅ FUNCIÓN PARA MOSTRAR MODAL DE LÍMITE
    function mostrarModalLimite() {
        const modal = new bootstrap.Modal(document.getElementById('modalLimiteAlcanzado'));
        const content = document.getElementById('mensaje-limite-content');
        
        content.innerHTML = `
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Límite alcanzado</h6>
                <p>Has alcanzado el límite máximo de <strong>3 productos</strong> entre personalización y recomendación IA.</p>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="text-center">
                        <h4 class="text-warning">${limitesActuales.totalOcupados}</h4>
                        <small>Productos activos</small>
                    </div>
                </div>
                <div class="col-6">
                    <div class="text-center">
                        <h4 class="text-success">3</h4>
                        <small>Límite máximo</small>
                    </div>
                </div>
            </div>
            <hr>
            <p class="text-muted mb-0">
                <i class="fas fa-info-circle"></i>
                Espera a que se entreguen tus pedidos para poder agregar nuevos productos.
            </p>
        `;
        
        modal.show();
    }

    // ✅ ESCUCHAR CAMBIOS EN CARRITOS
    window.addEventListener('storage', function (e) {
        if (e.key === 'carritosActualizados' || e.key === 'carritoActualizado') {
            console.log('[DEBUG] Carritos actualizados globalmente, recargando límites...');
            cargarEstadoUnificado();
        }
    });

    function notificarCambioCarritos() {
        try {
            localStorage.setItem('carritoActualizado', Date.now().toString());
            console.log('[DEBUG] Notificación de carrito enviada');
        } catch (error) {
            console.log('[DEBUG] Error enviando notificación:', error);
        }
    }

    // ✅ INICIALIZAR AL CARGAR LA PÁGINA
    document.addEventListener('DOMContentLoaded', function () {
        console.log('[DEBUG] Inicializando vista Index de Personalización...');
        cargarEstadoUnificado();

        // Recargar cuando se hace focus en la página
        window.addEventListener('focus', function () {
            console.log('[DEBUG] Página enfocada - recargando límites...');
            cargarEstadoUnificado();
        });

        // ✅ RECARGAR PERIÓDICAMENTE CADA 30 SEGUNDOS
        setInterval(cargarEstadoUnificado, 30000);
    });

    // ✅ FUNCIONES ADICIONALES PARA DEBUGGING
    window.debugLimites = function () {
        console.log('=== DEBUG LÍMITES ===');
        console.log('Límites actuales:', limitesActuales);
        console.log('Disponibles:', limitesActuales.disponibles);
        console.log('Total ocupados:', limitesActuales.totalOcupados);
        console.log('Límite:', limitesActuales.limite);
        console.log('===================');
    };

    // ✅ FUNCIÓN PARA TESTING
    window.testValidacion = function (productoId = 1) {
        console.log('[TEST] Probando validación...');
        validarYSeleccionar(productoId);
    };
</script>
}

@functions {
    public string GetCategoryIcon(string category)
    {
        return category.ToLower() switch
        {
            "pizza" => "fas fa-pizza-slice",
            "cerveza" => "fas fa-beer",
            "cocteles" => "fas fa-cocktail",
            "bebidas" => "fas fa-glass-whiskey",
            "promo" => "fas fa-percentage",
            "sánduches" or "sanduches" => "fas fa-hamburger",
            "shot" => "fas fa-wine-glass-alt",
            "picadas" => "fas fa-cheese",
            _ => "fas fa-tag"
        };
    }
}