@model ProyectoIdentity.Models.Producto
@{
    ViewData["Title"] = "Detalle del Producto";
}

<style>
    .product-detail-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .product-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        text-align: center;
    }

    .product-image {
        width: 200px;
        height: 200px;
        object-fit: cover;
        border-radius: 50%;
        border: 5px solid rgba(255,255,255,0.3);
        margin-bottom: 20px;
    }

    .product-body {
        padding: 30px;
    }

    .info-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .info-section h5 {
            color: #495057;
            margin-bottom: 15px;
            font-weight: 600;
        }

    .info-item {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

        .info-item i {
            width: 20px;
            margin-right: 10px;
            color: #6c757d;
        }

    .price-display {
        font-size: 2rem;
        font-weight: bold;
        color: #28a745;
        text-align: center;
        padding: 20px;
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border-radius: 8px;
        margin: 20px 0;
    }

    .ingredient-list {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        padding: 15px;
    }

    .ingredient-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #ffe8a1;
    }

        .ingredient-item:last-child {
            border-bottom: none;
        }

    .ingredient-name {
        font-weight: 500;
        color: #856404;
    }

    .ingredient-cost {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .removible-badge {
        font-size: 0.7rem;
        padding: 2px 6px;
        border-radius: 12px;
    }

    .badge-removible {
        background-color: #d4edda;
        color: #155724;
    }

    .badge-fixed {
        background-color: #f8d7da;
        color: #721c24;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 20px 0;
    }

    .stat-card {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
        transition: transform 0.2s ease;
    }

        .stat-card:hover {
            transform: translateY(-2px);
        }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #495057;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.9rem;
        margin-top: 5px;
    }
</style>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="product-detail-container">
                <!-- Header con imagen y nombre -->
                <div class="product-header">
                    @if (Model.Imagen != null)
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Imagen)"
                             class="product-image" alt="@Model.Nombre">
                    }
                    else
                    {
                        <div class="product-image bg-light d-flex align-items-center justify-content-center"
                             style="border: 5px solid rgba(255,255,255,0.3);">
                            <i class="fas fa-utensils fa-3x text-muted"></i>
                        </div>
                    }
                    <h1 class="mb-0">@Model.Nombre</h1>
                    <p class="mb-0 mt-2">
                        <span class="badge badge-light">@Model.Categoria</span>
                    </p>
                </div>

                <div class="product-body">
                    <!-- Precio destacado -->
                    <div class="price-display">
                        <i class="fas fa-dollar-sign"></i>@Model.Precio.ToString("F2")
                    </div>

                    <!-- Información básica -->
                    <div class="info-section">
                        <h5><i class="fas fa-info-circle"></i> Información General</h5>

                        <div class="info-item">
                            <i class="fas fa-tag"></i>
                            <span><strong>ID:</strong> @Model.Id</span>
                        </div>

                        <div class="info-item">
                            <i class="fas fa-layer-group"></i>
                            <span><strong>Categoría:</strong> @Model.Categoria</span>
                        </div>

                        @if (!string.IsNullOrEmpty(Model.Descripcion))
                        {
                            <div class="info-item">
                                <i class="fas fa-align-left"></i>
                                <span><strong>Descripción:</strong> @Model.Descripcion</span>
                            </div>
                        }
                    </div>

                    <!-- Estadísticas -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value">
                                @if (!string.IsNullOrEmpty(Model.Ingredientes))
                                {
                                    @try
                                    {
                                        var ingredientes = System.Text.Json.JsonSerializer.Deserialize<List<dynamic>>(Model.Ingredientes);
                                        @ingredientes.Count
                                    }
                                    catch
                                    {
                                        <span>0</span>
                                    }
                                }
                                else
                                {
                                    <span>0</span>
                                }
                            </div>
                            <div class="stat-label">Ingredientes</div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-value">
                                @(Model.Imagen != null ? "Sí" : "No")
                            </div>
                            <div class="stat-label">Tiene Imagen</div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-value">
                                @(!string.IsNullOrEmpty(Model.Ingredientes) ? "Sí" : "No")
                            </div>
                            <div class="stat-label">Personalizable</div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-value">
                                @(!string.IsNullOrEmpty(Model.Alergenos) ? "Sí" : "No")
                            </div>
                            <div class="stat-label">Tiene Alérgenos</div>
                        </div>
                    </div>

                    <!-- Ingredientes -->
                    @if (!string.IsNullOrEmpty(Model.Ingredientes))
                    {
                        <div class="info-section">
                            <h5><i class="fas fa-list-ul"></i> Ingredientes Personalizables</h5>
                            <div class="ingredient-list">
                                @try
                                {
                                    var ingredientes = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, object>>>(Model.Ingredientes);
                                    @foreach (var ingrediente in ingredientes)
                                    {
                                        <div class="ingredient-item">
                                            <div>
                                                <span class="ingredient-name">@ingrediente["Nombre"]</span>
                                                <span class="removible-badge @(Convert.ToBoolean(ingrediente["Removible"]) ? "badge-removible" : "badge-fixed")">
                                                    @(Convert.ToBoolean(ingrediente["Removible"]) ? "Removible" : "Fijo")
                                                </span>
                                            </div>
                                            <span class="ingredient-cost">$@Convert.ToDecimal(ingrediente["Costo"]).ToString("F2")</span>
                                        </div>
                                    }
                                }
                                catch
                                {
                                    <p class="text-muted">Error al mostrar ingredientes</p>
                                }
                            </div>
                        </div>
                    }

                    <!-- Información nutricional -->
                    @if (!string.IsNullOrEmpty(Model.InfoNutricional))
                    {
                        <div class="info-section">
                            <h5><i class="fas fa-heartbeat"></i> Información Nutricional</h5>
                            <p class="mb-0">@Model.InfoNutricional</p>
                        </div>
                    }

                    <!-- Alérgenos -->
                    @if (!string.IsNullOrEmpty(Model.Alergenos))
                    {
                        <div class="info-section">
                            <h5><i class="fas fa-exclamation-triangle text-warning"></i> Alérgenos</h5>
                            <div class="alert alert-warning mb-0">
                                <strong>Contiene:</strong> @Model.Alergenos
                            </div>
                        </div>
                    }

                    <!-- Acciones -->
                    <div class="text-center mt-4">
                        <div class="btn-group" role="group">
                            <a href="@Url.Action("EditarProducto", new { id = Model.Id })"
                               class="btn btn-warning btn-lg">
                                <i class="fas fa-edit"></i> Editar Producto
                            </a>
                            <a href="@Url.Action("AdminProductos")"
                               class="btn btn-secondary btn-lg">
                                <i class="fas fa-arrow-left"></i> Volver al Listado
                            </a>
                            <button onclick="eliminarProducto(@Model.Id, '@Model.Nombre')"
                                    class="btn btn-danger btn-lg">
                                <i class="fas fa-trash"></i> Eliminar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de confirmación para eliminar -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle"></i> Confirmar Eliminación
                </h5>
                <button type="button" class="close text-white" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas eliminar este producto?</p>
                <div class="alert alert-warning">
                    <strong id="productName"></strong>
                </div>
                <p class="text-muted">
                    <i class="fas fa-info-circle"></i> Esta acción no se puede deshacer y serás redirigido al listado de productos.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">
                    <i class="fas fa-trash"></i> Eliminar
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let productoAEliminar = null;

        // Función para eliminar producto
        function eliminarProducto(id, nombre) {
            productoAEliminar = id;
            document.getElementById('productName').textContent = nombre;
            $('#deleteModal').modal('show');
        }

        // Confirmar eliminación
        document.getElementById('confirmDelete').addEventListener('click', function () {
            if (productoAEliminar) {
                // Mostrar loading
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Eliminando...';
                this.disabled = true;

                fetch('@Url.Action("EliminarProducto")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ id: productoAEliminar })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Mostrar mensaje de éxito
                            mostrarMensaje('success', data.message);

                            // Redirigir al listado después de 2 segundos
                            setTimeout(() => {
                                window.location.href = '@Url.Action("AdminProductos")';
                            }, 2000);
                        } else {
                            mostrarMensaje('error', data.message);
                            this.innerHTML = '<i class="fas fa-trash"></i> Eliminar';
                            this.disabled = false;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        mostrarMensaje('error', 'Error al eliminar el producto');
                        this.innerHTML = '<i class="fas fa-trash"></i> Eliminar';
                        this.disabled = false;
                    })
                    .finally(() => {
                        $('#deleteModal').modal('hide');
                        productoAEliminar = null;
                    });
            }
        });

        function mostrarMensaje(tipo, mensaje) {
            // Crear toast de notificación
            const toastHtml = `
                    <div class="alert alert-${tipo === 'success' ? 'success' : 'danger'} alert-dismissible fade show" style="position: fixed; top: 20px; right: 20px; z-index: 9999;">
                        <i class="fas fa-${tipo === 'success' ? 'check-circle' : 'exclamation-circle'}"></i> ${mensaje}
                        <button type="button" class="close" data-dismiss="alert">
                            <span>&times;</span>
                        </button>
                    </div>
                `;

            document.body.insertAdjacentHTML('beforeend', toastHtml);

            // Auto-ocultar después de 3 segundos
            setTimeout(() => {
                const alert = document.querySelector('.alert:last-of-type');
                if (alert) alert.remove();
            }, 3000);
        }
    </script>
}

@section Styles {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
}