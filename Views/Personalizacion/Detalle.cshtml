@model ProyectoIdentity.Models.Producto
@{
    ViewData["Title"] = Model.Nombre;
    int puntosAGanar = (int)(Model.Precio * 30);
    var ingredientes = ViewBag.Ingredientes as List<ProyectoIdentity.Models.Ingrediente> ?? new();
    bool esAdministrador = User.IsInRole("Administrador");
}

<style>
    /* ===== SMART IMAGE POSITIONING SYSTEM PARA DETALLE ===== */
    .smart-product-image-container {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
        background: linear-gradient(45deg, #f8f9fa, #e9ecef);
        width: 100%;
        height: 400px; /* Altura fija para escritorio */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .smart-product-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        object-position: center center;
        background: white;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    /* Loading state */
    .smart-product-image-loading {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-shimmer 1.5s infinite;
        width: 100%;
        height: 100%;
    }
    
    @@keyframes loading-shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }

    /* Efecto hover */
    .smart-product-image-container:hover .smart-product-image {
        transform: scale(1.03);
    }

    /* ===== IMÁGENES VERTICALES QUE DEBEN SER HORIZONTALES (CROP) ===== */
    .smart-product-image[alt*="Cheddar"],
    .smart-product-image[alt*="Verace"],
    .smart-product-image[alt*="Jarro"],
    .smart-product-image[alt*="Litro"],
    .smart-product-image[alt*="Growler"],
    .smart-product-image[alt*="Corona"],
    .smart-product-image[alt*="Clásico"],
    .smart-product-image[alt*="3 jarros cerveza artesanal"],
    .smart-product-image[alt*="Botella de vino tinto"],
    .smart-product-image[alt*="Manaba mule"],
    .smart-product-image[alt*="Botella de caña manabita"],
    .smart-product-image[alt*="Botella de Antioqueño"],
    .smart-product-image[alt*="Botella de tequila"],
    .smart-product-image[alt*="Mojito maracuyá"],
    .smart-product-image[alt*="Mojito frutos rojos"],
    .smart-product-image[alt*="Botella de Ron Abuelo"],
    .smart-product-image[alt*="Gin Tonic Maracuyá"],
    .smart-product-image[alt*="Gin Tonic Frutos rojos"],
    .smart-product-image[alt*="Jager Sour"],
    .smart-product-image[alt*="Jagerito"] {
        object-fit: cover !important;
        object-position: center center !important;
        background: transparent !important;
        width: 100% !important;
        height: 100% !important;
    }

    /* ===== IMÁGENES CON FONDO BLANCO QUE DEBEN RELLENAR EL FONDO ===== */
    .smart-product-image[alt*="Agua sin gas"],
    .smart-product-image[alt*="Agua mineral"],
    .smart-product-image[alt*="Limonada"],
    .smart-product-image[alt*="Limonada Rosa"],
    .smart-product-image[alt*="Té caliente"],
    .smart-product-image[alt*="Coca-Cola"],
    .smart-product-image[alt*="Fanta"],
    .smart-product-image[alt*="Fioravanti"],
    .smart-product-image[alt*="Sprite"],
    .smart-product-image[alt*="Café americano"],
    .smart-product-image[alt*="Capuccino"],
    .smart-product-image[alt*="Iced Coffee"],
    .smart-product-image[alt*="Shot de aguardiente"] {
        object-fit: contain !important;
        object-position: center center !important;
        background: #FFFFFF !important;
    }

    /* ===== CONTENEDORES PARA IMÁGENES CON FONDO BLANCO ===== */
    .smart-product-image-container:has(.smart-product-image[alt*="Agua sin gas"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Agua mineral"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Limonada"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Limonada Rosa"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Té caliente"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Coca-Cola"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Fanta"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Fioravanti"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Sprite"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Café americano"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Capuccino"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Iced Coffee"]) {
        background: #FFFFFF !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Shot de aguardiente"]) {
        background: #FFFFFF !important;
    }

    /* ===== IMÁGENES CON FONDO NEGRO ===== */
    .smart-product-image[alt*="Cuba libre"],
    .smart-product-image[alt*="Whisky Sour"],
    .smart-product-image[alt*="Whisky on the rocks"] {
        object-fit: contain !important;
        object-position: center center !important;
        background: #000000 !important;
    }

    /* ===== CONTENEDORES PARA IMÁGENES CON FONDO NEGRO ===== */
    .smart-product-image-container:has(.smart-product-image[alt*="Cuba libre"]) {
        background: #000000 !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Whisky Sour"]) {
        background: #000000 !important;
    }

    .smart-product-image-container:has(.smart-product-image[alt*="Whisky on the rocks"]) {
        background: #000000 !important;
    }

    /* ===== FALLBACK PARA NAVEGADORES QUE NO SOPORTAN :has() ===== */
    .smart-product-image-container[data-producto="agua-sin-gas"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="agua-mineral"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="limonada"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="limonada-rosa"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="te-caliente"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="coca-cola"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="fanta"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="fioravanti"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="sprite"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="cafe-americano"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="capuccino"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="iced-coffee"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="shot-aguardiente"] {
        background: #FFFFFF !important;
    }

    .smart-product-image-container[data-producto="cuba-libre"] {
        background: #000000 !important;
    }

    .smart-product-image-container[data-producto="whisky-sour"] {
        background: #000000 !important;
    }

    .smart-product-image-container[data-producto="whisky-on-the-rocks"] {
        background: #000000 !important;
    }

    /* ===== AJUSTE ESPECIAL PARA MÓVIL ===== */
    @@media (max-width: 768px) {
        .smart-product-image-container {
            height: 300px; /* Altura más pequeña en móvil */
        }
        
        .smart-product-image[alt*="Cheddar"],
        .smart-product-image[alt*="Verace"],
        .smart-product-image[alt*="Jarro"],
        .smart-product-image[alt*="Litro"],
        .smart-product-image[alt*="Growler"],
        .smart-product-image[alt*="Corona"],
        .smart-product-image[alt*="Clásico"] {
            object-position: center 30% !important;
        }
    }

    /* ===== ESTILOS ORIGINALES CONSERVADOS ===== */
    .product-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .product-header {
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
        margin-bottom: 30px;
    }

    .product-image-container {
        flex: 1;
        min-width: 300px;
        position: relative;
    }

    .product-info {
        flex: 1;
        min-width: 300px;
        display: flex;
        flex-direction: column;
    }

    .product-title {
        font-size: 2.2em;
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
    }

    .product-description {
        font-size: 1.1em;
        color: #555;
        margin-bottom: 20px;
    }

    .product-price {
        font-size: 1.6em;
        font-weight: bold;
        color: #333;
        margin-bottom: 5px;
    }

    .product-points {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
        padding: 15px 20px;
        border-radius: 20px;
        font-size: 1.1em;
        font-weight: bold;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.02);
        }

        100% {
            transform: scale(1);
        }
    }

    .points-breakdown {
        background: #f8f9fa;
        border-left: 4px solid #28a745;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 0 10px 10px 0;
    }

    .category-header-touch {
        display: flex;
        align-items: center;
        background-color: #ffffff;
        padding: 8px 12px;
        border-radius: 8px;
        cursor: pointer;
        border: 1px solid #e0e0e0;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: all 0.2s ease;
        position: absolute;
        top: 15px;
        right: 15px;
        z-index: 10;
    }

        .category-header-touch:hover {
            box-shadow: 0 2px 5px rgba(0,0,0,0.15);
        }

    .category-icon {
        width: 28px;
        height: 28px;
        margin-right: 8px;
    }

    .touchable-text {
        color: #333;
        text-decoration: none;
        font-size: 14px;
        line-height: 1.2;
        font-weight: 500;
    }

    .tight-line {
        line-height: 1.1;
    }

    .btn-ar {
        background-color: #ff4081;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 20px;
        margin-top: 15px;
        font-weight: bold;
        cursor: pointer;
        display: block;
        width: 100%;
        transition: all 0.3s;
    }

        .btn-ar:hover {
            background-color: #e91e63;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);
        }

    /* Estilos para el formulario de personalización */
    .personalization-form {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .quantity-btn {
        width: 35px;
        height: 35px;
        border: 1px solid #ddd;
        background: #f8f9fa;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        transition: all 0.2s;
    }

        .quantity-btn:hover {
            background: #28a745;
            color: white;
        }

    .quantity-input {
        width: 60px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 8px;
        font-weight: bold;
    }

    .ingredients-container {
        background: white;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #e0e0e0;
    }

    .ingredient-item {
        margin-bottom: 10px;
        padding: 8px;
        border-radius: 5px;
        transition: background 0.2s;
    }

        .ingredient-item:hover {
            background: #f0f0f0;
        }

    .price-summary {
        background: #e8f5e8;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #28a745;
    }

    .btn-success {
        background: linear-gradient(45deg, #28a745, #20c997);
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        font-weight: bold;
        transition: all 0.3s;
    }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }

    .btn-warning {
        background-color: #F2A900;
        border-color: #F2A900;
        color: #fff;
        border-radius: 8px;
        transition: all 0.3s;
    }

        .btn-warning:hover {
            background-color: #e09600;
            border-color: #d48e00;
            color: #fff;
            transform: translateY(-2px);
        }

    .btn-outline-secondary {
        border-radius: 8px;
        transition: all 0.3s;
    }

        .btn-outline-secondary:hover {
            transform: translateY(-2px);
        }

    /* Acordeón moderno */
    .accordion-section {
        margin-top: 30px;
    }

    .accordion-item {
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 15px;
        overflow: hidden;
        transition: all 0.3s;
    }

        .accordion-item:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

    .accordion-header {
        padding: 15px;
        background-color: #f8f9fa;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: background 0.2s;
    }

        .accordion-header:hover {
            background-color: #e9ecef;
        }

    .accordion-title {
        font-size: 18px;
        font-weight: bold;
        margin: 0;
        color: #000;
    }

    .accordion-content {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease;
        background-color: white;
    }

    .accordion-content-inner {
        padding: 15px;
    }

    .nutrition-table {
        width: 100%;
        border-collapse: collapse;
    }

        .nutrition-table tr {
            border-bottom: 1px solid #eee;
        }

            .nutrition-table tr:last-child {
                border-bottom: none;
            }

        .nutrition-table td {
            padding: 8px 0;
        }

            .nutrition-table td:first-child {
                font-weight: bold;
                width: 40%;
            }

    .allergen-list {
        margin: 0;
        padding: 0;
        list-style-type: none;
    }

        .allergen-list li {
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }

            .allergen-list li:last-child {
                border-bottom: none;
            }

    /* Responsive */
    @@media (max-width: 768px) {
        .product-header {
            flex-direction: column;
        }

        .product-container {
            padding: 15px;
        }
    }
</style>

<div class="product-container">
    <div id="estado-unificado" class="alert alert-info" style="display: none;">
        <h6><i class="fas fa-info-circle"></i> Estado de productos</h6>
        <div class="row">
            <div class="col-md-4">
                <strong>Disponibles:</strong> <span id="disponibles-count">-</span> producto(s) más
            </div>
            <div class="col-md-4">
                <strong>Pedidos realizados:</strong> <span id="activos-count">-</span>
            </div>
        </div>
    </div>
    <div class="product-header">
        <!-- Imagen del producto MEJORADA -->
        <div class="product-image-container">
            <div class="smart-product-image-container" data-category="@Model.Categoria.ToLower()">
                @if (Model.Imagen != null)
                {
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Imagen)"
                         alt="@Model.Nombre" 
                         class="smart-product-image smart-product-image-loading"
                         onload="handleSmartProductImageLoad(this)"
                         onerror="handleSmartProductImageError(this)" />
                }
                else
                {
                    <div class="smart-fallback">
                        <i class="fas fa-utensils"></i>
                    </div>
                }
            </div>

            @* ✅ MOSTRAR RA SOLO PARA PIZZA Y SÁNDUCHES *@
            @if (new[] { "pizza", "sánduches", "picadas" }.Contains(Model.Categoria.ToLower()))
            {
                <div class="category-header-touch">
                    <img src="~/images1/ra.png" alt="Realidad Aumentada" class="category-icon" />
                    <a href="#" class="touchable-text">
                        <span class="tight-line">Realidad</span><br />
                        <span class="tight-line">Aumentada</span>
                    </a>
                </div>

                <!-- Botón de Realidad Aumentada debajo de la imagen -->
                <button type="button" class="btn btn-ar" id="view-ar-btn" onclick="location.href='@Url.Action("VistaAR", "RealidadAumentada", new { id = Model.Id })'">
                    Ver en Realidad Aumentada
                    <i class="fas fa-cube ml-2"></i>
                </button>
            }

        </div>

        <!-- Información del producto -->
        <div class="product-info">
            <h1 class="product-title">@Model.Nombre</h1>
            <p class="product-description">@Model.Descripcion</p>
            <div class="product-price">Precio: $@Model.Precio.ToString("F2")</div>

            <!-- Puntos -->
            <div class="product-points">
                <i class="fas fa-star"></i> ¡Ganas @puntosAGanar puntos con este producto!
            </div>

            <div class="points-breakdown">
                <small class="text-muted">
                    <i class="fas fa-info-circle"></i> <strong>Desglose de puntos:</strong><br>
                    $@Model.Precio × 30 puntos por dólar = @puntosAGanar puntos<br>
                    <em>Cada dólar que gastes te da 30 puntos de fidelidad</em>
                </small>
            </div>

            <!-- Formulario de personalización -->
            <div class="personalization-form">
                <form id="personalizacionForm">
                    <input type="hidden" id="productoId" value="@Model.Id" />
                    <input type="hidden" id="esAdministrador" value="@esAdministrador.ToString().ToLower()" />

                    <!-- Cantidad -->
                    <div class="mb-4">
                        <label class="form-label h6">Cantidad:</label>
                        <div class="quantity-control">
                            <button type="button" class="quantity-btn" onclick="cambiarCantidad(-1)">-</button>
                            <input type="number" id="cantidad" value="1" min="1" max="10" class="quantity-input" readonly />
                            <button type="button" class="quantity-btn" onclick="cambiarCantidad(1)">+</button>
                        </div>
                    </div>

                    <!-- Ingredientes removibles -->
                    @if (ingredientes.Any(i => i.Removible))
                    {
                        <div class="mb-4">
                            <h6>Quitar ingredientes: <small class="text-muted">(opcional)</small></h6>
                            <div class="ingredients-container">
                                @foreach (var ingrediente in ingredientes.Where(i => i.Removible))
                                {
                                    <div class="form-check ingredient-item">
                                        <input class="form-check-input" type="checkbox"
                                               value="@ingrediente.Nombre"
                                               data-costo="@ingrediente.Costo"
                                               id="ingrediente_@ingrediente.Nombre.Replace(" ", "_")" />
                                        <label class="form-check-label" for="ingrediente_@ingrediente.Nombre.Replace(" ", "_")">
                                            Sin @ingrediente.Nombre
                                            @if (esAdministrador)
                                            {
                                                <small class="text-muted">(Ahorro: $@ingrediente.Costo.ToString("F2"))</small>
                                            }
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Notas especiales -->
                    <div class="mb-4">
                        <label class="form-label h6">Notas especiales:</label>
                        <textarea id="notasEspeciales" class="form-control" rows="3"
                                  placeholder="Ej: Extra picante, sin sal, etc..."></textarea>
                    </div>

                    <!-- Resumen -->
                    <div class="price-summary">
                        <div class="d-flex justify-content-between">
                            <span><strong>Precio:</strong></span>
                            <span id="precioFinal"><strong>$@Model.Precio.ToString("F2")</strong></span>
                        </div>
                        @if (esAdministrador)
                        {
                            <div class="d-flex justify-content-between text-muted">
                                <span>Ahorro interno:</span>
                                <span id="ahorroInterno">$0.00</span>
                            </div>
                        }
                    </div>

                    <!-- Botones -->
                    <div class="d-grid gap-2 mt-4">
                        <button type="button" class="btn btn-success btn-lg" onclick="agregarAlCarrito()">
                            <i class="fas fa-cart-plus"></i> Agregar al Carrito
                        </button>
                        <div class="row">
                            <div class="col-6">
                                <a href="@Url.Action("Index")" class="btn btn-outline-secondary w-100">
                                    <i class="fas fa-arrow-left"></i> Seguir Comprando
                                </a>
                            </div>
                            <div class="col-6">
                                <a href="@Url.Action("VerCarrito")" class="btn btn-warning w-100">
                                    <i class="fas fa-shopping-cart"></i> Ver Carrito (<span id="contadorCarrito">0</span>)
                                </a>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Información adicional (acordeón) -->
    <div class="accordion-section">
        <h2>Más información</h2>

        <div class="accordion-item">
            <div class="accordion-header" id="nutrition-header">
                <h3 class="accordion-title">Información nutricional</h3>
                <span>›</span>
            </div>
            <div class="accordion-content" id="nutrition-content">
                <div class="accordion-content-inner">
                    <table class="nutrition-table">
                        @if (!string.IsNullOrEmpty(Model.InfoNutricional))
                        {
                            @foreach (var linea in Model.InfoNutricional.Split('|'))
                            {
                                var partes = linea.Split(':');
                                if (partes.Length == 2)
                                {
                                    <tr>
                                        <td>@partes[0]</td>
                                        <td>@partes[1]</td>
                                    </tr>
                                }
                            }
                        }
                        else
                        {
                            <tr><td>Peso</td><td>210g</td></tr>
                            <tr><td>Calorías</td><td>517Kcal - 26%</td></tr>
                            <tr><td>Grasas</td><td>26g - 33%</td></tr>
                            <tr><td>Carbohidratos</td><td>42g - 14%</td></tr>
                            <tr><td>Proteínas</td><td>28g - 57%</td></tr>
                            <tr><td>Sodio</td><td>1020mg - 42%</td></tr>
                        }
                    </table>
                </div>
            </div>
        </div>

        <div class="accordion-item">
            <div class="accordion-header" id="allergen-header">
                <h3 class="accordion-title">Información alérgenos</h3>
                <span>›</span>
            </div>
            <div class="accordion-content" id="allergen-content">
                <div class="accordion-content-inner">
                    <ul class="allergen-list">
                        @if (!string.IsNullOrEmpty(Model.Alergenos))
                        {
                            @foreach (var alergeno in Model.Alergenos.Split('|'))
                            {
                                <li>@alergeno</li>
                            }
                        }
                        else
                        {
                            <li>Contiene lácteos</li>
                            <li>Puede contener gluten</li>
                            <li>Puede contener trazas de frutos secos</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // ===== SMART IMAGE ANALYZER PARA DETALLE DE PRODUCTO =====
    class SmartProductImageAnalyzer {
        constructor() {
            this.fondoBlancoProductos = [
                'agua sin gas', 'agua mineral', 'limonada', 'limonada rosa',
                'té caliente', 'coca-cola', 'fanta', 'fioravanti', 'sprite',
                'café americano', 'capuccino', 'iced coffee', 'shot de aguardiente'
            ];

            this.fondoNegroProductos = [
                'cuba libre', 'whisky sour', 'whisky on the rocks'
            ];

            this.verticalProductos = [
                'cheddar', 'verace', 'jarro', 'litro', 'growler', 'corona', 'clásico',
                '3 jarros cerveza artesanal', 'botella de vino tinto', 'manaba mule',
                'botella de caña manabita', 'botella de antioqueño', 'botella de tequila',
                'mojito maracuyá', 'mojito frutos rojos', 'botella de ron abuelo',
                'gin tonic maracuyá', 'gin tonic frutos rojos', 'jager sour', 'jagerito'
            ];
        }

        analyzeContent(img) {
            const alt = (img.alt || '').toLowerCase();

            if (this.fondoBlancoProductos.some(producto => alt.includes(producto))) {
                return 'fondo-blanco';
            }

            if (this.fondoNegroProductos.some(producto => alt.includes(producto))) {
                return 'fondo-negro';
            }

            if (this.verticalProductos.some(producto => alt.includes(producto))) {
                return 'vertical-crop';
            }

            return 'generic';
        }

        applyOptimizations(img, container, content) {
            const productName = img.alt.toLowerCase();
            const dataName = productName.replace(/\s+/g, '-').replace(/[^\w-]/g, '');

            switch (content) {
                case 'fondo-blanco':
                    container.setAttribute('data-producto', dataName);
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = '#FFFFFF';
                    container.style.background = '#FFFFFF';
                    break;

                case 'fondo-negro':
                    container.setAttribute('data-producto', dataName);
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = '#000000';
                    container.style.background = '#000000';
                    break;

                case 'vertical-crop':
                    img.style.objectFit = 'cover';
                    img.style.objectPosition = 'center center';
                    img.style.background = 'transparent';
                    break;

                default:
                    img.style.objectFit = 'contain';
                    img.style.objectPosition = 'center center';
                    img.style.background = 'white';
            }
        }
    }

    const smartProductAnalyzer = new SmartProductImageAnalyzer();

    function handleSmartProductImageLoad(img) {
        img.classList.remove('smart-product-image-loading');
        const container = img.closest('.smart-product-image-container');
        const content = smartProductAnalyzer.analyzeContent(img);
        
        smartProductAnalyzer.applyOptimizations(img, container, content);
        console.log(`Detalle imagen analizada: ${img.alt} | ${content}`);
    }

    function handleSmartProductImageError(img) {
        const container = img.closest('.smart-product-image-container');
        container.innerHTML = '<div class="smart-fallback"><i class="fas fa-utensils"></i></div>';
    }

    // ✅ VARIABLES GLOBALES PARA LÍMITES Y CARRITO (CONSERVADAS)
    let limitesActuales = {
        productosActivos: 0,    // ✅ NOMBRE CORREGIDO
        limite: 11,
        disponibles: 11,
        productosEnCarritos: 0  // ✅ NOMBRE CORREGIDO
    };

    // ✅ FUNCIÓN PARA CARGAR LÍMITES CON ESTADO UNIFICADO
    async function cargarLimitesProductos() {
        try {
            const response = await fetch('@Url.Action("ObtenerLimitesProductos")');
            const data = await response.json();

            // ✅ ASEGURAR QUE LOS VALORES NO SEAN UNDEFINED
            limitesActuales = {
                productosActivos: data.productosActivos || 0,
                limite: 10,  // ✅ LÍMITE VISUAL SIEMPRE 3
                disponibles: Math.min(10, data.disponibles || 0),  // ✅ MÁXIMO 3 VISUAL
                productosEnCarritos: data.productosEnCarritos || 0
            };

            console.log('[DEBUG] Límites cargados:', limitesActuales);

            // Actualizar interfaz según límites
            actualizarInterfazLimites();

            // Si ya está en el límite, mostrar mensaje
            if (limitesActuales.disponibles === 0) {
                mostrarMensajeLimite(data.mensaje || 'No puedes agregar más productos');
            }

            // ✅ TAMBIÉN CARGAR ESTADO UNIFICADO
            cargarEstadoUnificado();

        } catch (error) {
            console.error('Error al cargar límites:', error);
            // ✅ VALORES POR DEFECTO EN CASO DE ERROR
            limitesActuales = {
                productosActivos: 0,
                limite: 10,  // ✅ LÍMITE VISUAL 3
                disponibles: 10,
                productosEnCarritos: 0
            };
        }
    }

    // ✅ FUNCIÓN PARA CARGAR ESTADO UNIFICADO EN DETALLE
    async function cargarEstadoUnificado() {
        try {
            const response = await fetch('@Url.Action("ObtenerLimitesProductos")');
            const data = await response.json();

            console.log('[DEBUG] Datos recibidos:', data);

            // ✅ TOMAR DATOS DEL BACKEND PERO APLICAR LÍMITE VISUAL DE 3
            const productosActivos = data.productosActivos || 0;
            const productosCarritos = data.productosEnCarritos || 0;
            const totalOcupados = productosActivos + productosCarritos;

            // ✅ APLICAR LÍMITE VISUAL DE 3 PARA TODO
            const LIMITE_VISUAL = 10;
            const productosActivosVisual = Math.min(LIMITE_VISUAL, productosActivos);
            const productosCarritosVisual = Math.min(LIMITE_VISUAL, productosCarritos);
            const totalVisual = productosActivosVisual + productosCarritosVisual;
            const disponiblesVisual = Math.max(0, LIMITE_VISUAL - totalVisual);

            // ✅ ACTUALIZAR VARIABLES GLOBALES CON LÍMITE VISUAL DE 3
            limitesActuales = {
                productosActivos: productosActivosVisual,
                limite: LIMITE_VISUAL,  // ✅ SIEMPRE 3
                disponibles: disponiblesVisual,
                productosEnCarritos: productosCarritosVisual,
                totalOcupados: totalVisual,
                permitido: totalVisual < LIMITE_VISUAL,
                mensaje: data.mensaje || ""
            };

            // ✅ ACTUALIZAR INTERFAZ CON VALORES VISUALES (LÍMITE 3)
            document.getElementById('disponibles-count').textContent = disponiblesVisual;
            document.getElementById('activos-count').textContent = productosActivosVisual + '/' + LIMITE_VISUAL;

            // ✅ MOSTRAR/OCULTAR Y CAMBIAR COLOR SEGÚN ESTADO
            const estadoElement = document.getElementById('estado-unificado');

            if (totalVisual > 0) {
                estadoElement.style.display = 'block';

                // ✅ LÓGICA BASADA EN LÍMITE VISUAL DE 3
                if (totalVisual >= LIMITE_VISUAL) {
                    estadoElement.className = 'alert alert-danger';
                } else if (disponiblesVisual <= 1) {
                    estadoElement.className = 'alert alert-warning';
                } else {
                    estadoElement.className = 'alert alert-info';
                }
            } else {
                // ✅ OCULTAR CUANDO NO HAY PRODUCTOS
                estadoElement.style.display = 'none';
            }

            console.log('[DEBUG] Estado unificado actualizado en detalle');
            console.log(`[DEBUG] Visual: ${disponiblesVisual} disponibles, ${totalVisual}/10 ocupados`);

            // ✅ ACTUALIZAR INTERFAZ DE LÍMITES EXISTENTE
            actualizarInterfazLimites();

        } catch (error) {
            console.error('Error al cargar estado unificado:', error);
            // ✅ VALORES POR DEFECTO SEGUROS CON LÍMITE 3
            limitesActuales = {
                productosActivos: 0,
                limite: 10,  // ✅ LÍMITE VISUAL 3
                disponibles: 10,
                productosEnCarritos: 0,
                totalOcupados: 0,
                permitido: true,
                mensaje: ""
            };

            const estadoElement = document.getElementById('estado-unificado');
            if (estadoElement) {
                estadoElement.style.display = 'none';
            }
        }
    }

    // ✅ FUNCIÓN PARA ACTUALIZAR LA INTERFAZ SEGÚN LÍMITES
    function actualizarInterfazLimites() {
        const cantidadInput = document.getElementById('cantidad');
        const cantidadActual = parseInt(cantidadInput.value) || 1;

        // ✅ PERMITIR HASTA 3 PRODUCTOS REALES (aunque el backend maneja 4)
        const maxPermitido = Math.min(10, Math.max(1, limitesActuales.disponibles));

        console.log(`[DEBUG] Cantidad actual: ${cantidadActual}, Max permitido: ${maxPermitido}, Disponibles: ${limitesActuales.disponibles}`);

        // ✅ ACTUALIZAR EL MÁXIMO EN EL INPUT
        cantidadInput.max = maxPermitido;

        // ✅ SI LA CANTIDAD ACTUAL EXCEDE EL LÍMITE, AJUSTARLA
        if (cantidadActual > maxPermitido) {
            cantidadInput.value = maxPermitido;
            console.log(`[DEBUG] Cantidad ajustada de ${cantidadActual} a ${maxPermitido}`);
        }

        // ✅ DESHABILITAR BOTÓN + SI ESTÁ EN EL LÍMITE
        const botonMas = document.querySelector('.quantity-btn[onclick="cambiarCantidad(1)"]');
        if (botonMas) {
            const debeDeshabilitarse = cantidadActual >= maxPermitido;

            botonMas.disabled = debeDeshabilitarse;
            botonMas.style.opacity = debeDeshabilitarse ? '0.5' : '1';
            botonMas.style.cursor = debeDeshabilitarse ? 'not-allowed' : 'pointer';

            if (debeDeshabilitarse) {
                botonMas.title = 'Máximo 10 productos por pedido';
            } else {
                botonMas.title = 'Agregar uno más';
            }
        }

        // ✅ MOSTRAR INFORMACIÓN DE LÍMITE
        mostrarInfoLimite();
    }

       function mostrarInfoLimite() {
        // Función vacía - no muestra nada pero mantiene la funcionalidad
        console.log('Info límite ocultada por diseño');
    }

    // ✅ FUNCIÓN PARA MOSTRAR MENSAJE DE LÍMITE
    function mostrarMensajeLimite(mensaje) {
        const formContainer = document.querySelector('.personalization-form');
        const botonAgregar = formContainer.querySelector('.btn-success');

        const disponiblesVisuales = Math.min(10, limitesActuales.disponibles);

        if (disponiblesVisuales <= 0) {
            botonAgregar.disabled = true;
            botonAgregar.innerHTML = '<i class="fas fa-ban"></i> Límite Alcanzado';
            botonAgregar.className = 'btn btn-secondary btn-lg';

            let mensajeElement = document.getElementById('mensaje-limite');
            if (!mensajeElement) {
                mensajeElement = document.createElement('div');
                mensajeElement.id = 'mensaje-limite';
                mensajeElement.className = 'alert alert-danger mt-3';
                formContainer.insertBefore(mensajeElement, botonAgregar.parentNode);
            }

            mensajeElement.innerHTML = `
                    <h6><i class="fas fa-exclamation-triangle"></i> No puedes agregar más productos</h6>
                    <p>${mensaje}</p>
                    <p><small>El límite máximo es 10 productos activos en total.</small></p>
                    <a href="@Url.Action("VerCarrito")" class="btn btn-outline-primary btn-sm">
                        Ver carrito actual
                    </a>
                `;
        }
    }

    // ✅ FUNCIÓN CAMBIAR CANTIDAD (ACTUALIZADA CON LÍMITES)
    function cambiarCantidad(cambio) {
        const input = document.getElementById('cantidad');
        const cantidadActual = parseInt(input.value) || 1;
        let nuevaCantidad = cantidadActual + cambio;

        console.log(`[DEBUG] Cambiar cantidad: ${cantidadActual} + ${cambio} = ${nuevaCantidad}`);

        // ✅ APLICAR LÍMITES
        if (nuevaCantidad < 1) {
            nuevaCantidad = 1;
            console.log('[DEBUG] Cantidad mínima es 1');
        }

        // ✅ LÍMITE VISUAL DE 3 (aunque el backend permita 4)
        if (nuevaCantidad > 10) {
            console.log('[DEBUG] Límite visual máximo: 3');
            if (cambio > 0) {
                // Si está intentando aumentar más de 3, no hacer nada
                return;
            }
            nuevaCantidad = 10;
        }

        // ✅ TAMBIÉN RESPETAR LOS DISPONIBLES DEL BACKEND
        const maxDisponibles = Math.min(10, limitesActuales.disponibles);
        if (nuevaCantidad > maxDisponibles) {
            console.log(`[DEBUG] No se puede exceder disponibles: ${maxDisponibles}`);
            if (cambio > 0) {
                return;
            }
            nuevaCantidad = Math.max(1, maxDisponibles);
        }

        console.log(`[DEBUG] Nueva cantidad final: ${nuevaCantidad}`);

        input.value = nuevaCantidad;
        if (typeof calcularAhorro === 'function') {
            calcularAhorro();
        }
        actualizarInterfazLimites();
    }

    // ✅ FUNCIÓN CALCULAR AHORRO (ORIGINAL)
    function calcularAhorro() {
        const esAdministrador = document.getElementById('esAdministrador').value === 'true';

        // ✅ USUARIO NORMAL - NO VE CAMBIOS EN EL PRECIO
        if (!esAdministrador) {
            // El usuario SIEMPRE ve el precio original, sin importar los ingredientes removidos
            // No hay cálculos ni cambios visibles
            console.log('[DEBUG] Usuario normal - precio se mantiene original');
            return;
        }

        // ✅ SOLO ADMINISTRADOR VE LOS CÁLCULOS INTERNOS
        console.log('[DEBUG] Administrador - calculando ahorros internos');

        const checkboxes = document.querySelectorAll('.form-check-input:checked');
        let ahorroInterno = 0;
        let detallesAhorro = [];

        checkboxes.forEach(checkbox => {
            const costo = parseFloat(checkbox.getAttribute('data-costo')) || 0;
            const ingrediente = checkbox.value;
            ahorroInterno += costo;
            detallesAhorro.push(`${ingrediente}: ${costo.toFixed(2)}`);
            console.log(`[DEBUG] Ahorro por quitar ${ingrediente}: ${costo}`);
        });

        const cantidad = parseInt(document.getElementById('cantidad').value) || 1;
        const ahorroTotal = ahorroInterno * cantidad;

        // ✅ MOSTRAR INFORMACIÓN SOLO AL ADMIN
        let ahorroElement = document.getElementById('ahorroInterno');
        if (!ahorroElement) {
            // Crear elemento para mostrar ahorro interno al admin
            ahorroElement = document.createElement('div');
            ahorroElement.id = 'ahorroInterno';
            ahorroElement.className = 'alert alert-success mt-3';

            const priceContainer = document.querySelector('.price-summary');
            if (priceContainer) {
                priceContainer.appendChild(ahorroElement);
            }
        }

        if (ahorroTotal > 0) {
            ahorroElement.style.display = 'block';
            ahorroElement.innerHTML = `
                    <h6><i class="fas fa-chart-line"></i> Análisis Interno (Solo Admin)</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Precio usuario:</strong> $@Model.Precio.ToString("F2")<br>
                            <strong>Ahorro interno:</strong> ${ahorroTotal.toFixed(2)}<br>
                            <strong>Costo real:</strong> ${(@Model.Precio * cantidad - ahorroTotal).toFixed(2)}
                        </div>
                        <div class="col-md-6">
                            <strong>Detalles:</strong><br>
                            ${detallesAhorro.join('<br>')}
                        </div>
                    </div>
                    <small class="text-muted">
                        <i class="fas fa-info-circle"></i> El usuario paga el precio completo, el ahorro es margen interno.
                    </small>
                `;
        } else {
            ahorroElement.style.display = 'none';
        }

        console.log(`[DEBUG] Ahorro total interno: ${ahorroTotal}`);
    }

    // ✅ FUNCIÓN AGREGAR AL CARRITO (ACTUALIZADA CON LÍMITES Y RECARGA)
    function agregarAlCarrito() {
        const productoId = document.getElementById('productoId').value;
        const cantidad = parseInt(document.getElementById('cantidad').value) || 1;
        const notasEspeciales = document.getElementById('notasEspeciales').value;

        console.log(`[DEBUG] Intentando agregar ${cantidad} productos. Disponibles reales: ${limitesActuales.disponibles}`);

        // ✅ VALIDACIÓN CON LÍMITE VISUAL DE 3
        if (cantidad > 10) {
            alert('No puedes agregar más de 10 productos por pedido.');
            return;
        }

        // ✅ PERO USAR LOS DISPONIBLES REALES DEL BACKEND
        if (cantidad > limitesActuales.disponibles) {
            alert(`Solo puedes agregar ${Math.min(10, limitesActuales.disponibles)} producto(s) más.`);
            return;
        }

        const ingredientesRemovidos = [];
        document.querySelectorAll('.form-check-input:checked').forEach(checkbox => {
            ingredientesRemovidos.push(checkbox.value);
        });

        const data = {
            ProductoId: parseInt(productoId),
            Cantidad: cantidad,
            IngredientesRemovidos: ingredientesRemovidos,
            NotasEspeciales: notasEspeciales
        };

        console.log('[DEBUG] Enviando datos:', data);

        // Mostrar loading
        const boton = event.target;
        const textoOriginal = boton.innerHTML;
        boton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Agregando...';
        boton.disabled = true;

        fetch('@Url.Action("AgregarAlCarrito")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        })
            .then(response => response.json())
            .then(result => {
                console.log('[DEBUG] Respuesta del servidor:', result);

                if (result.success) {
                    alert('✅ Producto agregado al carrito');
                    window.location.href = '@Url.Action("VerCarrito")';
                } else {
                    if (result.redirectUrl) {
                        window.location.href = result.redirectUrl;
                    } else {
                        alert('❌ ' + result.message);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al agregar producto al carrito');
            })
            .finally(() => {
                boton.innerHTML = textoOriginal;
                boton.disabled = false;
            });
    }

    // ✅ ACORDEÓN (ORIGINAL)
    document.querySelectorAll('.accordion-header').forEach(function (header) {
        header.addEventListener('click', function () {
            // Obtener el contenido relacionado
            var targetId = this.id.replace('header', 'content');
            var content = document.getElementById(targetId);

            // Si está abierto, cerrarlo
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
                this.querySelector('span').style.transform = 'rotate(0deg)';
            } else {
                // De lo contrario, abrirlo
                content.style.maxHeight = content.scrollHeight + 'px';
                this.querySelector('span').style.transform = 'rotate(90deg)';
            }
        });
    });

    // ✅ EVENTOS PARA CALCULAR AHORRO (ORIGINAL)
    document.querySelectorAll('.form-check-input').forEach(checkbox => {
        checkbox.addEventListener('change', function () {
            if (typeof calcularAhorro === 'function') {
                calcularAhorro();
            }
        });
    });

    // ✅ INICIALIZACIÓN ACTUALIZADA
    document.addEventListener('DOMContentLoaded', function () {
        console.log('[DEBUG] Inicializando página de detalle...');

        // ✅ CARGAR ESTADO UNIFICADO PRIMERO
        cargarEstadoUnificado();

        // ✅ CÓDIGO EXISTENTE
        cargarLimitesProductos();

        window.addEventListener('focus', function () {
            console.log('[DEBUG] Página enfocada - recargando límites...');
            cargarLimitesProductos();
            cargarEstadoUnificado(); // ✅ AGREGAR ESTA LÍNEA
        });

        // ✅ RECARGAR PERIÓDICAMENTE CADA 30 SEGUNDOS
        setInterval(function () {
            cargarLimitesProductos();
            cargarEstadoUnificado(); // ✅ AGREGAR ESTA LÍNEA
        }, 30000);

        if (typeof calcularAhorro === 'function') {
            calcularAhorro();
        }
    });

    window.addEventListener('storage', function (e) {
        if (e.key === 'carritosActualizados' || e.key === 'carritoActualizado') {
            console.log('[DEBUG] Carritos actualizados globalmente, recargando estado...');
            cargarEstadoUnificado();
        }
    });
</script>