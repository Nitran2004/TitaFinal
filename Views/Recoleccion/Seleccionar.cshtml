@model IEnumerable<ProyectoIdentity.Models.CollectionPoint>
@{
    ViewBag.Title = "Seleccionar Punto";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int productoId = ViewBag.ProductoId ?? 0;
    string productoNombre = ViewBag.ProductoNombre ?? "Producto";
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-warning text-white">
            <h2>Selecciona punto de recolección</h2>
            <p class="mb-0">Para: <strong>@productoNombre</strong></p>
        </div>
        <div class="card-body">
            <!-- MENSAJE INICIAL -->
            <div id="locationRequired" class="alert alert-info">
                <i class="fas fa-map-marker-alt"></i>
                <strong>Detectando tu ubicación...</strong>
                <p class="mb-0">Permítenos acceder a tu ubicación para calcular distancias precisas.</p>
            </div>

            <!-- MENSAJE DE CARGA -->
            <div id="loadingLocation" style="display: none;">
                <div class="alert alert-warning">
                    <i class="fas fa-spinner fa-spin"></i> Obteniendo tu ubicación para calcular distancias...
                </div>
            </div>

            <!-- MENSAJE DE ERROR -->
            <div id="locationError" style="display: none;">
                <!-- Se llena dinámicamente con JavaScript -->
            </div>

            <!-- Contenedor de puntos -->
            <div id="puntosContainer" style="display: none;">
                <div class="row">
                    @foreach (var punto in Model)
                    {
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5>@punto.Name</h5>
                                    <p>
                                        <strong>Sucursal:</strong> @punto.Sucursal.Nombre<br />
                                        <strong>Dirección:</strong> @punto.Address<br />
                                        <strong>Distancia:</strong>
                                        <span class="distance-value"
                                              data-id="@punto.Id"
                                              data-lat="@punto.Sucursal.Latitud.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                                              data-lng="@punto.Sucursal.Longitud.ToString(System.Globalization.CultureInfo.InvariantCulture)">
                                            <i class="fas fa-spinner fa-spin"></i> Calculando...
                                        </span>
                                    </p>
                                    
                                    <!-- 🔥 CORREGIDO: Nombres de parámetros que coinciden con el controlador -->
                                    <form asp-action="Confirmar" asp-controller="Recoleccion" method="post">
                                        <input type="hidden" name="productoId" value="@productoId" />
                                        <input type="hidden" name="id" value="@punto.Id" />
                                        <input type="hidden" name="userLat" class="userLat-input" id="userLat-@punto.Id" value="" />
                                        <input type="hidden" name="userLng" class="userLng-input" id="userLng-@punto.Id" value="" />
                                        <input type="hidden" name="distancia" class="distancia-input" id="distancia-@punto.Id" value="" />
                                        <button type="submit" class="btn btn-warning w-100">
                                            Seleccionar este punto
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-3">
                <a href="javascript:history.back()" class="btn btn-outline-secondary">
                    Volver al Catalogo de productos
                </a>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Elementos del DOM
            const locationRequired = document.getElementById('locationRequired');
            const loadingLocation = document.getElementById('loadingLocation');
            const locationError = document.getElementById('locationError');
            const puntosContainer = document.getElementById('puntosContainer');
            const distanceElements = document.querySelectorAll('.distance-value');
            const userLatInputs = document.querySelectorAll('.userLat-input');
            const userLngInputs = document.querySelectorAll('.userLng-input');
            const distanciaInputs = document.querySelectorAll('.distancia-input');

            // Detectar dispositivos
            function esSafariIOS() {
                return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
            }

            // Verificar permisos
            async function verificarPermisos() {
                if ('permissions' in navigator) {
                    try {
                        const result = await navigator.permissions.query({name: 'geolocation'});
                        console.log('Estado de permisos:', result.state);
                        return result.state;
                    } catch (error) {
                        return 'unknown';
                    }
                }
                return 'unknown';
            }

            // Función para calcular la distancia
            function calcularDistancia(lat1, lon1, lat2, lon2) {
                lat1 = parseFloat(String(lat1).replace(',', '.'));
                lon1 = parseFloat(String(lon1).replace(',', '.'));
                lat2 = parseFloat(String(lat2).replace(',', '.'));
                lon2 = parseFloat(String(lon2).replace(',', '.'));

                if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) {
                    console.error("Coordenadas inválidas");
                    return 0;
                }

                const toRad = function (deg) { return deg * (Math.PI / 180); };
                const R = 6371;
                const dLat = toRad(lat2 - lat1);
                const dLon = toRad(lon2 - lon1);

                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);

                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                return R * c;
            }

            function actualizarDistancias(userLat, userLng) {
                console.log(`✅ Actualizando distancias con coordenadas: ${userLat}, ${userLng}`);

                userLatInputs.forEach(input => {
                    input.value = String(userLat).replace(',', '.');
                });
                userLngInputs.forEach(input => {
                    input.value = String(userLng).replace(',', '.');
                });

                distanceElements.forEach(function (element) {
                    const puntoId = element.getAttribute('data-id');
                    const sucursalLat = parseFloat(element.getAttribute('data-lat').replace(',', '.'));
                    const sucursalLng = parseFloat(element.getAttribute('data-lng').replace(',', '.'));

                    const distancia = calcularDistancia(userLat, userLng, sucursalLat, sucursalLng);
                    const distanciaRedondeada = distancia.toFixed(2);

                    const distanciaInput = document.getElementById(`distancia-${puntoId}`);
                    if (distanciaInput) {
                        distanciaInput.value = distanciaRedondeada;
                    }

                    element.classList.remove('text-success', 'text-warning', 'text-danger');

                    if (distancia < 3) {
                        element.classList.add('text-success');
                        element.innerHTML = distanciaRedondeada + ' km <i class="fas fa-check-circle"></i>';
                    } else if (distancia < 7) {
                        element.classList.add('text-warning');
                        element.innerHTML = distanciaRedondeada + ' km';
                    } else {
                        element.classList.add('text-danger');
                        element.innerHTML = distanciaRedondeada + ' km';
                    }
                });

                locationRequired.style.display = 'none';
                loadingLocation.style.display = 'none';
                locationError.style.display = 'none';
                puntosContainer.style.display = 'block';
            }

            // Función principal para obtener ubicación
            async function obtenerUbicacion() {
                const estadoPermisos = await verificarPermisos();
                
                locationRequired.style.display = 'none';
                loadingLocation.style.display = 'block';
                locationError.style.display = 'none';
                puntosContainer.style.display = 'none';

                if (estadoPermisos === 'denied') {
                    mostrarInstruccionesPermisos();
                    return;
                }

                if (navigator.geolocation) {
                    const options = esSafariIOS() ? {
                        enableHighAccuracy: false,
                        timeout: 30000,
                        maximumAge: 300000
                    } : {
                        enableHighAccuracy: true,
                        timeout: 15000,
                        maximumAge: 0
                    };

                    navigator.geolocation.getCurrentPosition(
                        function (position) {
                            console.log('✅ Geolocalización exitosa');
                            const userLat = position.coords.latitude;
                            const userLng = position.coords.longitude;
                            actualizarDistancias(userLat, userLng);
                        },
                        function (error) {
                            console.error('❌ Error de geolocalización:', error);
                            manejarError(error);
                        },
                        options
                    );
                } else {
                    mostrarSeleccionManual();
                }
            }

            // Mostrar instrucciones para permisos bloqueados
            function mostrarInstruccionesPermisos() {
                loadingLocation.style.display = 'none';
                locationError.innerHTML = `
                    <div class="alert alert-warning">
                        <h5><i class="fas fa-shield-alt"></i> Permisos de ubicación bloqueados</h5>
                        <p><strong>Para habilitar la ubicación:</strong></p>
                        <ol>
                            <li>Haz clic en el <strong>🔒 candado</strong> en la barra de direcciones</li>
                            <li>Cambia "Ubicación" de <span class="badge bg-danger">Bloquear</span> a <span class="badge bg-success">Permitir</span></li>
                            <li>Recarga la página (F5)</li>
                        </ol>
                        <div class="mt-3">
                            <button onclick="location.reload()" class="btn btn-success me-2">
                                <i class="fas fa-redo"></i> Recargar página
                            </button>
                            <button onclick="mostrarSeleccionManual()" class="btn btn-warning">
                                <i class="fas fa-map"></i> Seleccionar ciudad
                            </button>
                        </div>
                    </div>
                `;
                locationError.style.display = 'block';
            }

            // Manejar errores de geolocalización
            function manejarError(error) {
                loadingLocation.style.display = 'none';
                let mensaje = 'Error obteniendo ubicación';
                
                if (error.code === 1) mensaje = 'Permisos denegados';
                if (error.code === 2) mensaje = 'Ubicación no disponible';
                if (error.code === 3) mensaje = 'Tiempo agotado';

                locationError.innerHTML = `
                    <div class="alert alert-danger">
                        <h5><i class="fas fa-exclamation-triangle"></i> ${mensaje}</h5>
                        <p>No pudimos obtener tu ubicación automáticamente.</p>
                        <div class="mt-3">
                            <button onclick="obtenerUbicacion()" class="btn btn-warning me-2">
                                <i class="fas fa-redo"></i> Reintentar
                            </button>
                            <button onclick="mostrarSeleccionManual()" class="btn btn-warning">
                                <i class="fas fa-map"></i> Seleccionar ciudad
                            </button>
                        </div>
                    </div>
                `;
                locationError.style.display = 'block';
            }

            // Mostrar selección manual de ciudades
            function mostrarSeleccionManual() {
                loadingLocation.style.display = 'none';
                locationError.innerHTML = `
                    <div class="alert alert-primary">
                        <h5><i class="fas fa-map-marker-alt"></i> Selecciona tu ciudad</h5>
                        <p>Elige la ciudad más cercana para calcular distancias:</p>
                        
                        <div class="row g-2 mt-3">
                            <div class="col-md-4">
                                <button class="btn btn-outline-warning w-100" onclick="seleccionarCiudad(-0.1857, -78.4678, 'Quito')">
                                    <i class="fas fa-building"></i><br><strong>Quito</strong>
                                </button>
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-outline-warning w-100" onclick="seleccionarCiudad(-2.1962, -79.8862, 'Guayaquil')">
                                    <i class="fas fa-ship"></i><br><strong>Guayaquil</strong>
                                </button>
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-outline-warning w-100" onclick="seleccionarCiudad(-1.2544, -78.6267, 'Ambato')">
                                    <i class="fas fa-mountain"></i><br><strong>Ambato</strong>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                locationError.style.display = 'block';
            }

            // Seleccionar ciudad específica
            window.seleccionarCiudad = function(lat, lng, ciudad) {
                console.log(`📍 Ciudad seleccionada: ${ciudad}`);
                
                loadingLocation.innerHTML = `
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle"></i> 
                        <strong>Ubicación: ${ciudad}</strong>
                        <p class="mb-0">Calculando distancias...</p>
                    </div>
                `;
                loadingLocation.style.display = 'block';
                locationError.style.display = 'none';
                
                setTimeout(() => {
                    actualizarDistancias(lat, lng);
                }, 1000);
            };

            // Hacer funciones globales
            window.obtenerUbicacion = obtenerUbicacion;
            window.mostrarSeleccionManual = mostrarSeleccionManual;

            // Inicializar automáticamente
            obtenerUbicacion();
        });
    </script>
}

@section styles {
    <style>
        .btn-warning {
            color: #fff;
            background-color: #F2A900;
            border-color: #F2A900;
        }

        .btn-warning:hover {
            color: #fff;
            background-color: #e09600;
            border-color: #d48e00;
        }

        .fa-spinner {
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
}