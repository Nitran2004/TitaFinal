@model ProyectoIdentity.Models.CollectionPoint
@{
    ViewData["Title"] = "Confirmar Punto de Recolección";

    // Valores por defecto para Quito si no hay coordenadas
    if (ViewBag.UserLat == null)
    {
        ViewBag.UserLat = -0.1857;
    }

    if (ViewBag.UserLng == null)
    {
        ViewBag.UserLng = -78.4954;
    }

    if (ViewBag.Distancia == null)
    {
        ViewBag.Distancia = 3.5;
    }

    // Es crucial obtener el ID del punto de recolección
    int puntoRecoleccionId = ViewBag.PuntoRecoleccionId ?? 0;

    // Obtener el ID del producto de personalización
    int productoId = ViewBag.ProductoPersonalizacionId ?? 0;
    bool esPersonalizacion = ViewBag.EsPersonalizacion ?? false;

    // Formatear la distancia para que siempre muestre el punto decimal
    string distanciaFormateada = string.Format("{0:0.00}", ViewBag.Distancia);
}

<div class="container mt-4">
    <!-- Mostrar mensajes de error si existen -->
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card">
        <div class="card-header bg-success text-white">
            <h2 class="mb-0">
                @if (esPersonalizacion)
                {
                    <i class="fas fa-cogs"></i>
                    <text>Confirma tu punto de recolección</text>
                }
                else
                {
                    <text>Confirma tu punto de recolección</text>
                }
            </h2>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Detalles del punto de recolección</h5>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@Model.Name</h5>
                            <p class="card-text">
                                <strong>Sucursal:</strong> @Model.Sucursal.Nombre<br />
                                <strong>Dirección:</strong> @Model.Address<br />
                            </p>
                            <p class="card-text">
                                <strong>Distancia:</strong>
                                <span id="distancia-display" class="@(ViewBag.Distancia < 3 ? "text-success" : (ViewBag.Distancia < 7 ? "text-warning" : "text-danger"))">
                                    @distanciaFormateada km
                                    @if (ViewBag.Distancia < 3)
                                    {
                                        <i class="fas fa-check-circle"></i>
                                    }
                                </span>
                            </p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle"></i>
                                <text>Instrucciones</text>
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (esPersonalizacion)
                            {
                                <p><strong>Proceso:</strong></p>
                                <ul>
                                    <li>A continuación podrás personalizar tu producto</li>
                                    <li>Podrás quitar ingredientes que no desees</li>
                                    <li>Puedes agregar notas especiales</li>
                                    <li>Una vez finalices, podrás recoger tu pedido en aproximadamente 20-30 minutos</li>
                                </ul>
                            }
                            else
                            {
                                <p>Una vez confirmes tu pedido:</p>
                                <ul>
                                    <li>Recibirás una confirmación con el número de tu pedido</li>
                                    <li>Podrás recoger tu pedido en el punto seleccionado en aproximadamente 20-30 minutos</li>
                                    <li>Cuando llegues, menciona el número de tu pedido</li>
                                </ul>
                            }

                            @if (ViewBag.Distancia > 5)
                            {
                                <div class="alert alert-warning mt-3">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <strong>Nota:</strong> Te encuentras a más de 5 km de distancia.
                                    Considera el tiempo de viaje para recoger tu pedido.
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4 d-flex justify-content-between">
                <a href="@Url.Action("Seleccionar", "Recoleccion")"
                   class="btn btn-outline-secondary navigation-btn">
                    <i class="fas fa-arrow-left"></i> Elegir otro punto
                </a>

                @if (puntoRecoleccionId > 0)
                {
                    @if (esPersonalizacion && productoId > 0)
                    {
                        <!-- Flujo de personalización: ir a Detalle -->
                        <form action="@Url.Action("ContinuarPersonalizacion", "Recoleccion")" method="post" id="formConfirmarPersonalizacion">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="puntoRecoleccionId" value="@puntoRecoleccionId" />
                            <input type="hidden" name="productoId" value="@productoId" />
                            <button type="submit" class="btn btn-success" id="btnContinuar">
                                <i class="fas fa-cogs"></i> Confirmar y continuar
                            </button>
                        </form>
                    }
                    else
                    {
                        <!-- 🔥 FORMULARIO CORREGIDO: Ahora envía los parámetros que espera el controlador -->
                        <form asp-action="FinalizarPedido" asp-controller="Recoleccion" method="post" id="formFinalizarPedido">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="puntoRecoleccionId" value="@puntoRecoleccionId" />
                            <input type="hidden" name="tipoServicio" value="Para llevar" />
                            <input type="hidden" name="observaciones" value="" />
                            <button type="submit" class="btn btn-success" id="btnFinalizar">
                                <i class="fas fa-check"></i> Confirmar y finalizar pedido
                            </button>
                        </form>
                    }
                }
                else
                {
                    <button class="btn btn-secondary" disabled>
                        <i class="fas fa-exclamation-triangle"></i> Error: No se puede continuar
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<!-- Datos para recálculo de distancia -->
<script>
    window.sucursalLat = @Model.Sucursal.Latitud.ToString(System.Globalization.CultureInfo.InvariantCulture);
    window.sucursalLng = @Model.Sucursal.Longitud.ToString(System.Globalization.CultureInfo.InvariantCulture);
</script>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const esPersonalizacion = @(esPersonalizacion ? "true" : "false");

            // Función para calcular distancia
            function calcularDistancia(lat1, lon1, lat2, lon2) {
                lat1 = parseFloat(String(lat1).replace(',', '.'));
                lon1 = parseFloat(String(lon1).replace(',', '.'));
                lat2 = parseFloat(String(lat2).replace(',', '.'));
                lon2 = parseFloat(String(lon2).replace(',', '.'));

                if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) {
                    return 0;
                }

                const toRad = function (deg) { return deg * (Math.PI / 180); };
                const R = 6371;
                const dLat = toRad(lat2 - lat1);
                const dLon = toRad(lon2 - lon1);

                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);

                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                return R * c;
            }

            // Función para actualizar la visualización de la distancia
            function actualizarDistanciaEnVista(distancia) {
                const distanciaDisplay = document.getElementById('distancia-display');

                if (distanciaDisplay) {
                    const distanciaRedondeada = distancia.toFixed(2);

                    // Limpiar clases existentes
                    distanciaDisplay.classList.remove('text-success', 'text-warning', 'text-danger');

                    // Aplicar estilo según la distancia
                    if (distancia < 3) {
                        distanciaDisplay.classList.add('text-success');
                        distanciaDisplay.innerHTML = `${distanciaRedondeada} km <i class="fas fa-check-circle"></i>`;
                    } else if (distancia < 7) {
                        distanciaDisplay.classList.add('text-warning');
                        distanciaDisplay.innerHTML = `${distanciaRedondeada} km`;
                    } else {
                        distanciaDisplay.classList.add('text-danger');
                        distanciaDisplay.innerHTML = `${distanciaRedondeada} km`;
                    }
                }
            }

            // Intentar obtener ubicación y recalcular
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function (position) {
                        console.log('✅ Ubicación obtenida para recalcular');
                        const userLat = position.coords.latitude;
                        const userLng = position.coords.longitude;

                        const distanciaCalculada = calcularDistancia(userLat, userLng, window.sucursalLat, window.sucursalLng);
                        console.log(`Distancia recalculada: ${distanciaCalculada.toFixed(2)} km`);

                        actualizarDistanciaEnVista(distanciaCalculada);
                    },
                    function (error) {
                        console.log("Error obteniendo ubicación:", error);
                        // Mantener la distancia que viene del servidor
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 300000
                    }
                );
            }

            // Configurar el formulario según el tipo de flujo
            if (esPersonalizacion) {
                const form = document.getElementById('formConfirmarPersonalizacion');
                if (form) {
                    form.addEventListener('submit', function (e) {
                        const confirmacion = confirm("¿Deseas continuar con el pedido?");
                        if (!confirmacion) {
                            e.preventDefault();
                            return false;
                        }
                        return true;
                    });
                }
            } else {
                const form = document.getElementById('formFinalizarPedido');
                if (form) {
                    form.addEventListener('submit', function (e) {
                        const confirmacion = confirm("¿Estás seguro de que deseas confirmar este pedido?");
                        if (!confirmacion) {
                            e.preventDefault();
                            return false;
                        }
                        console.log('✅ Enviando formulario a FinalizarPedido');
                        return true;
                    });
                }
            }
        });
    </script>
}

@section styles {
    <style>
        .navigation-btn {
            color: #6c757d !important;
            border-color: #6c757d !important;
            background-color: transparent !important;
            border-width: 2px !important;
            display: inline-flex !important;
            align-items: center !important;
            padding: 10px 20px !important;
        }

        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

            .btn-success:hover {
                background-color: #218838;
                border-color: #1e7e34;
            }
    </style>
}