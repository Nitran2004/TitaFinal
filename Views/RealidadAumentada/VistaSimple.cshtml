@{
    ViewData["Title"] = "Visualizador 3D Simple";
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualizador 3D Simple - Pizza</title>
    <style>
        body { 
            margin: 0; 
            padding: 0;
            background-color: #333;
            color: white;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }
        #container {
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }
        header {
            background-color: #222;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #canvas-container {
            flex: 1;
            width: 100%;
        }
        canvas {
            width: 100%;
            height: 100%;
            display: block;
        }
        #loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.7);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }
        .btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="container">
        <header>
            <h2>Modelo 3D: Pizza Pepperoni</h2>
            <button class="btn" onclick="history.back()">Volver</button>
        </header>
        <div id="canvas-container">
            <canvas id="canvas3d"></canvas>
        </div>
        <div id="loading">Cargando modelo 3D...</div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        // Variables
        let scene, camera, renderer, controls;
        let model;
        const modelPath = '/RealidadAumentada/GetGLBFile';
        const loadingElement = document.getElementById('loading');

        // Inicializar Three.js
        function init() {
            // Escena
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x333333);
            
            // Cámara
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 1, 3);
            
            // Renderer
            const canvas = document.getElementById('canvas3d');
            renderer = new THREE.WebGLRenderer({ 
                canvas: canvas,
                antialias: true 
            });
            renderer.setSize(canvas.clientWidth, canvas.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.shadowMap.enabled = true;
            
            // Luces
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 5, 5);
            directionalLight.castShadow = true;
            scene.add(directionalLight);
            
            // Controles
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            
            // Evento de redimensionamiento
            window.addEventListener('resize', onWindowResize);
            
            // Cargar modelo
            loadModel();
            
            // Animación
            animate();
        }
        
        // Cargar modelo
        function loadModel() {
            console.log('Cargando modelo desde:', modelPath);
            
            const loader = new THREE.GLTFLoader();
            loader.load(
                modelPath,
                function(gltf) {
                    console.log('Modelo cargado correctamente');
                    loadingElement.style.display = 'none';
                    
                    model = gltf.scene;
                    model.scale.set(0.5, 0.5, 0.5);
                    model.position.set(0, 0, 0);
                    
                    // Configurar sombras
                    model.traverse(function(node) {
                        if (node.isMesh) {
                            node.castShadow = true;
                            node.receiveShadow = true;
                        }
                    });
                    
                    scene.add(model);
                    
                    // Centrar cámara
                    fitCameraToModel();
                },
                function(xhr) {
                    // Progreso
                    if (xhr.lengthComputable) {
                        const percent = Math.floor((xhr.loaded / xhr.total) * 100);
                        loadingElement.textContent = `Cargando: ${percent}%`;
                    }
                },
                function(error) {
                    console.error('Error al cargar modelo:', error);
                    loadingElement.textContent = 'Error al cargar el modelo. Revise la consola para más detalles.';
                }
            );
        }
        
        // Ajustar cámara al modelo
        function fitCameraToModel() {
            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            const size = box.getSize(new THREE.Vector3());
            
            const maxDim = Math.max(size.x, size.y, size.z);
            const fov = camera.fov * (Math.PI / 180);
            let cameraZ = Math.abs(maxDim / (2 * Math.tan(fov / 2)));
            cameraZ *= 1.5; // Factor de ajuste
            
            camera.position.set(center.x, center.y + (size.y / 4), center.z + cameraZ);
            controls.target.set(center.x, center.y, center.z);
            controls.update();
        }
        
        // Manejar redimensionamiento
        function onWindowResize() {
            const canvas = renderer.domElement;
            camera.aspect = canvas.clientWidth / canvas.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(canvas.clientWidth, canvas.clientHeight);
        }
        
        // Función de animación
        function animate() {
            requestAnimationFrame(animate);
            
            if (controls) {
                controls.update();
            }
            
            if (model) {
                model.rotation.y += 0.005;
            }
            
            renderer.render(scene, camera);
        }
        
        // Iniciar
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>