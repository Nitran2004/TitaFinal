@{
    ViewData["Title"] = "Vista AR";
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vista AR - @ViewBag.ProductoNombre</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/loaders/DRACOLoader.js"></script>

    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #333;
            color: white;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }

        #container {
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        header {
            background-color: #222;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
        }

        .header-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .test-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        #canvas-container {
            flex: 1;
            width: 100%;
            position: relative;
        }

        canvas {
            width: 100%;
            height: 100%;
            display: block;
        }

        #loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.8);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            color: white;
        }

        #error {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(200,0,0,0.9);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            color: white;
            display: none;
            max-width: 80%;
        }

        .btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .btn-test {
            background-color: #2196F3;
        }

        .btn-warning {
            background-color: #ff9800;
        }

        .btn-control {
            background-color: #9C27B0;
            margin: 2px;
            padding: 4px 8px;
            font-size: 12px;
        }

        #model-stats {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.8);
            padding: 15px;
            border-radius: 5px;
            font-size: 12px;
            max-width: 300px;
        }

        #ai-panel {
            position: absolute;
            top: 200px;
            left: 10px;
            background: rgba(0,100,0,0.9);
            padding: 15px;
            border-radius: 5px;
            font-size: 11px;
            max-width: 300px;
            border: 2px solid #00ff00;
        }

        .ai-decision {
            color: #00ff00;
            font-weight: bold;
        }

        .ai-reasoning {
            color: #ccffcc;
            font-style: italic;
        }

        #controls-panel {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: rgba(0,0,0,0.8);
            padding: 15px;
            border-radius: 5px;
            font-size: 12px;
        }

        .control-group {
            margin-bottom: 10px;
        }

        .control-group label {
            display: block;
            margin-bottom: 5px;
            color: #fff;
        }

        .control-slider {
            width: 150px;
        }

        /* Móvil */
        .mobile-header {
            display: none;
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0,0,0,0.8);
            color: #fff;
            padding: 15px;
            border-radius: 10px;
            font-size: 14px;
            z-index: 20;
            max-width: calc(100% - 40px);
        }

        #ar-button {
            position: fixed;
            bottom: 50px;
            left: 50%;
            transform: translateX(-50%);
            background: #4CAF50;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            z-index: 25;
            display: none;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }

        #ar-status {
            position: absolute;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.8);
            color: #fff;
            padding: 10px 15px;
            border-radius: 15px;
            text-align: center;
            display: none;
            z-index: 15;
            font-size: 14px;
        }

        @@media (max-width: 768px) {
            header {
                display: none;
            }
            
            .mobile-header {
                display: block;
            }
        }
    </style>
</head>
<body>
    <div id="container">
        <header>
            <div class="header-info">
                <h2>🤖 IA Auto-Ajuste: @ViewBag.ProductoNombre</h2>
                <small>ID: @ViewBag.ProductoId | Archivo: @ViewBag.ModeloArchivo</small>
            </div>
            <div class="test-buttons">
                <button class="btn" onclick="history.back()">Volver</button>
                <a href="/RealidadAumentada/VistaAR?id=1" class="btn btn-test">ID 1</a>
                <a href="/RealidadAumentada/VistaAR?id=2" class="btn btn-test">ID 2</a>
                <a href="/RealidadAumentada/VistaAR?id=9" class="btn btn-warning">ID 9</a>
                <a href="/RealidadAumentada/VistaAR?id=10" class="btn btn-warning">ID 10</a>
                <button class="btn btn-control" onclick="resetCamera()">Reset Cámara</button>
                <button class="btn btn-control" onclick="toggleWireframe()">Wireframe</button>
                <button class="btn btn-control" onclick="showBoundingBox()">Bounding Box</button>
            </div>
        </header>

        <div class="mobile-header">
            <div><strong>@ViewBag.ProductoNombre</strong> - $@ViewBag.ProductoPrecio</div>
            <div id="device-status">Cargando...</div>
        </div>

        <div id="canvas-container">
            <canvas id="canvas3d"></canvas>
        </div>

        <div id="loading">Cargando modelo 3D...</div>
        <div id="error">
            <h3>Error al cargar el modelo</h3>
            <p id="error-message"></p>
            <button class="btn" onclick="recargarModelo()">Reintentar</button>
        </div>

        <div id="model-stats">
            <strong>📊 Estadísticas del Modelo:</strong><br>
            <span id="stats-content">Cargando...</span>
        </div>

        <div id="ai-panel">
            <strong>🤖 Decisiones de la IA:</strong><br>
            <span id="ai-content">Analizando...</span>
        </div>

        <div id="controls-panel">
            <strong>🎮 Controles del Modelo:</strong><br>
            <div class="control-group">
                <label>Escala: <span id="scale-value">1.0</span></label>
                <input type="range" id="scale-slider" class="control-slider" min="0.1" max="10" step="0.1" value="1.0">
            </div>
            <div class="control-group">
                <label>Posición Y: <span id="posY-value">0.0</span></label>
                <input type="range" id="posY-slider" class="control-slider" min="-5" max="5" step="0.1" value="0.0">
            </div>
            <div class="control-group">
                <label>Rotación Y: <span id="rotY-value">0°</span></label>
                <input type="range" id="rotY-slider" class="control-slider" min="0" max="360" step="5" value="0">
            </div>
            <div class="control-group">
                <button class="btn btn-control" onclick="autoFitModel()">Auto Ajustar</button>
                <button class="btn btn-control" onclick="centerModel()">Centrar</button>
            </div>
        </div>

        <div id="ar-status">Mueve el dispositivo para detectar superficies</div>
        <button id="ar-button">📷 Activar Realidad Aumentada</button>
    </div>

    <script>
        let scene, camera, renderer, controls;
        let model, boundingBoxHelper, wireframeModels = [];
        const modelPath = '@ViewBag.ModeloPath';
        const modelId = '@ViewBag.ProductoId';
        const modelFile = '@ViewBag.ModeloArchivo';
        const productName = '@ViewBag.ProductoNombre';

        // Variables AR
        let reticle, arSession = null, hitTestSource = null;
        let isARActive = false;
        let isMobile = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);

        // Referencias DOM
        const loadingElement = document.getElementById('loading');
        const errorElement = document.getElementById('error');
        const errorMessage = document.getElementById('error-message');
        const modelStats = document.getElementById('model-stats');
        const controlsPanel = document.getElementById('controls-panel');
        const statsContent = document.getElementById('stats-content');
        const aiPanel = document.getElementById('ai-panel');
        const aiContent = document.getElementById('ai-content');
        const deviceStatus = document.getElementById('device-status');
        const arStatus = document.getElementById('ar-status');
        const arButton = document.getElementById('ar-button');

        // Variables IA
        let aiAnalysis = null;
        let aiDecision = null;

        console.log('=== INICIANDO VISTA AR ===');
        console.log('Producto ID:', modelId);
        console.log('Archivo:', modelFile);
        console.log('Ruta:', modelPath);

        function showError(message) {
            errorMessage.textContent = message;
            loadingElement.style.display = 'none';
            errorElement.style.display = 'block';
            console.error('ERROR:', message);
        }

        function recargarModelo() {
            errorElement.style.display = 'none';
            loadingElement.style.display = 'block';
            if (model) {
                scene.remove(model);
                model = null;
            }
            if (boundingBoxHelper) {
                scene.remove(boundingBoxHelper);
                boundingBoxHelper = null;
            }
            wireframeModels.forEach(wf => scene.remove(wf));
            wireframeModels = [];
            loadModel();
        }

        function init() {
            console.log('🔍 DIAGNÓSTICO COMPLETO:');
            console.log('- Es móvil:', isMobile);
            console.log('- ModelPath:', modelPath);
            console.log('- ModelFile:', modelFile);
            console.log('- ModelId:', modelId);
            console.log('- ProductName:', productName);

            // Escena
            scene = new THREE.Scene();
            
            // FONDO CORREGIDO
            if (isMobile) {
                scene.background = null; // Transparente para AR
            } else {
                scene.background = new THREE.Color(0x333333); // Gris para PC
            }

            // Cámara
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 1000);
            camera.position.set(0, 2, 5);

            // Renderer
            const canvas = document.getElementById('canvas3d');
            renderer = new THREE.WebGLRenderer({
                canvas: canvas,
                antialias: true,
                alpha: isMobile
            });
            renderer.setSize(canvas.clientWidth, canvas.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.shadowMap.enabled = true;

            // XR para Android
            if (isMobile && /Android/i.test(navigator.userAgent)) {
                renderer.xr.enabled = true;
            }

            // Luces
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(5, 5, 5);
            directionalLight.castShadow = true;
            scene.add(directionalLight);

            const frontLight = new THREE.DirectionalLight(0xffffff, 0.4);
            frontLight.position.set(0, 0, 10);
            scene.add(frontLight);

            // Controles solo para PC
            if (!isMobile) {
                controls = new THREE.OrbitControls(camera, renderer.domElement);
                controls.enableDamping = true;
                controls.dampingFactor = 0.05;
                controls.minDistance = 0.1;
                controls.maxDistance = 100;
                setupControlListeners();
            }

            // AR para Android
            if (isMobile && /Android/i.test(navigator.userAgent)) {
                createReticle();
                if (arButton) {
                    arButton.style.display = 'block';
                    arButton.addEventListener('click', tryAR);
                }
            } else if (isMobile && /iPhone|iPad/i.test(navigator.userAgent)) {
                if (deviceStatus) deviceStatus.textContent = 'AR no disponible en Safari/iPhone';
            }

            window.addEventListener('resize', onWindowResize);
            loadModel();
        }

        function setupControlListeners() {
            const scaleSlider = document.getElementById('scale-slider');
            const posYSlider = document.getElementById('posY-slider');
            const rotYSlider = document.getElementById('rotY-slider');

            scaleSlider.addEventListener('input', function () {
                if (model) {
                    const scale = parseFloat(this.value);
                    model.scale.set(scale, scale, scale);
                    document.getElementById('scale-value').textContent = scale.toFixed(1);
                }
            });

            posYSlider.addEventListener('input', function () {
                if (model) {
                    const posY = parseFloat(this.value);
                    model.position.y = posY;
                    document.getElementById('posY-value').textContent = posY.toFixed(1);
                }
            });

            rotYSlider.addEventListener('input', function () {
                if (model) {
                    const rotY = parseFloat(this.value) * Math.PI / 180;
                    model.rotation.y = rotY;
                    document.getElementById('rotY-value').textContent = this.value + '°';
                }
            });
        }

        function loadModel() {
            console.log('Cargando modelo:', modelPath);

            const loader = new THREE.GLTFLoader();

            // AGREGAR SOPORTE PARA DRACO
            const dracoLoader = new THREE.DRACOLoader();
            dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');
            loader.setDRACOLoader(dracoLoader);

            loader.load(
                modelPath,
                function (gltf) {
                    console.log('Modelo cargado exitosamente');
                    loadingElement.style.display = 'none';

                    model = gltf.scene;

                    // FORZAR VISIBILIDAD BRUTAL PARA PIZZA3/4
                    if (modelFile === 'pizza3.glb' || modelFile === 'pizza4.glb') {
                        console.log('🍕 FORZANDO PIZZA3/4');

                        // Analizar modelo GLB real
                        console.log('🔍 Analizando modelo GLB:', model);
                        console.log('🔍 Hijos del modelo:', model.children.length);

                        if (model && model.children.length > 0) {
                            console.log('✅ Modelo GLB válido cargado');
                            // Forzar visibilidad de todos los meshes
                            model.traverse(function (child) {
                                if (child.isMesh) {
                                    console.log('📦 Mesh encontrado:', child.name, child.geometry, child.material);
                                    child.visible = true;
                                    if (child.material) {
                                        child.material.transparent = false;
                                        child.material.opacity = 1.0;
                                        child.material.side = THREE.DoubleSide;
                                    }
                                }
                            });
                        } else {
                            console.log('❌ Modelo GLB vacío - usando pizza artificial');
                            const geometry = new THREE.CylinderGeometry(0.15, 0.15, 0.02, 32);
                            const material = new THREE.MeshStandardMaterial({ color: 0xD2691E });
                            model = new THREE.Mesh(geometry, material);
                        }

                        // Configuración brutal para móvil
                        if (isMobile) {
                            model.position.set(0, 0, -1);
                            model.scale.set(1, 1, 1);
                            model.visible = true;

                            // Hacer todos los meshes visibles
                            model.traverse(function (child) {
                                if (child.isMesh) {
                                    child.visible = true;
                                    child.material.transparent = false;
                                    child.material.opacity = 1.0;
                                    child.castShadow = false;
                                    child.receiveShadow = false;
                                }
                            });
                        }
                    }

                    // Configurar sombras para otros modelos
                    if (modelFile !== 'pizza3.glb' && modelFile !== 'pizza4.glb') {
                        model.traverse(function (node) {
                            if (node.isMesh) {
                                node.castShadow = true;
                                node.receiveShadow = true;
                            }
                        });
                    }

                    scene.add(model);

                    // IA solo para PC o pizza1/2
                    if (!isMobile || (modelFile !== 'pizza3.glb' && modelFile !== 'pizza4.glb')) {
                        try {
                            aiAnalysis = performAIAnalysis();
                            aiDecision = makeAIDecision(aiAnalysis);
                            updateAIPanel();
                            applyAIDecisions();
                        } catch (aiError) {
                            console.error('Error IA:', aiError);
                        }
                    }

                    // Mostrar paneles solo para PC
                    if (!isMobile) {
                        modelStats.style.display = 'block';
                        controlsPanel.style.display = 'block';
                        aiPanel.style.display = 'block';
                    } else {
                        if (deviceStatus) deviceStatus.textContent = '📱 Vista 3D lista - Toca AR para usar cámara';
                        setupTouchControls();
                    }

                    model.visible = true;
                    analyzeModel();
                    animate();

                    // FORZAR VISIBILIDAD DESPUÉS DE CARGAR - PARA PIZZA3/4 EN MÓVIL
                    if (isMobile && (modelFile === 'pizza3.glb' || modelFile === 'pizza4.glb')) {
                        console.log('🍕 APLICANDO CONFIGURACIÓN FINAL PIZZA3/4');
                        setTimeout(() => {
                            if (model) {
                                model.visible = true;
                                model.position.set(0, 0, -1.5);
                                model.scale.set(0.8, 0.8, 0.8);
                                console.log('🍕 Pizza3/4 configurada:', model.position, model.scale);
                            }
                        }, 500);
                    }
                },
                function (xhr) {
                    if (xhr.lengthComputable) {
                        const percent = Math.floor((xhr.loaded / xhr.total) * 100);
                        loadingElement.textContent = `Cargando: ${percent}%`;
                    }
                },
                function (error) {
                    console.error('Error cargando modelo:', error);
                    showError(`Error de carga: ${error.message || 'Error desconocido'}`);
                }
            );
        }

        // IA - Sistema exacto del documento que funciona
        function performAIAnalysis() {
            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            const size = box.getSize(new THREE.Vector3());
            const maxDim = Math.max(size.x, size.y, size.z);
            const centerDistance = center.length();

            let meshCount = 0;
            let vertexCount = 0;
            model.traverse(function (node) {
                if (node.isMesh) {
                    meshCount++;
                    if (node.geometry && node.geometry.attributes.position) {
                        vertexCount += node.geometry.attributes.position.count;
                    }
                }
            });

            return {
                filename: modelFile,
                dimensions: size,
                center: center,
                maxDim: maxDim,
                centerDistance: centerDistance,
                meshCount: meshCount,
                vertexCount: vertexCount,
                sizeCategory: classifySize(maxDim),
                centerCategory: classifyCenter(centerDistance),
                complexityCategory: classifyComplexity(vertexCount),
                problemCategory: classifyProblem(modelFile, center, maxDim)
            };
        }

        function classifySize(maxDim) {
            if (maxDim < 0.001) return 'microscopic';
            if (maxDim < 0.1) return 'tiny';
            if (maxDim < 1) return 'small';
            if (maxDim < 10) return 'normal';
            return 'large';
        }

        function classifyCenter(distance) {
            if (distance < 1) return 'origin';
            if (distance < 10) return 'near';
            if (distance < 50) return 'far';
            return 'extreme';
        }

        function classifyComplexity(vertices) {
            if (vertices < 1000) return 'simple';
            if (vertices < 10000) return 'moderate';
            if (vertices < 100000) return 'complex';
            return 'very_complex';
        }

        function classifyProblem(filename, center, maxDim) {
            if (filename === 'pizza3.glb') {
                return 'displaced_center_small';
            }
            if (filename === 'pizza4.glb') {
                return 'displaced_center_small';
            }
            if (filename === 'pizza1.glb' || filename === 'pizza2.glb') {
                return 'normal';
            }
            return 'unknown';
        }

        function makeAIDecision(analysis) {
            let decision = {
                strategy: 'standard',
                scale: 1.0,
                rotationY: 0,
                positionY: 0.0,
                centerCorrection: false,
                noAutoRotation: false,
                reasoning: []
            };

            if (analysis.problemCategory === 'displaced_center_small') {
                decision.strategy = 'displaced_small_fix';
                decision.centerCorrection = true;
                decision.reasoning.push('Centro desplazado detectado');

                if (analysis.maxDim < 0.5) {
                    decision.scale = 20.0;
                    decision.reasoning.push('Modelo muy pequeño: escala agresiva aplicada');
                } else {
                    decision.scale = 3.0;
                    decision.reasoning.push('Modelo pequeño: escala moderada aplicada');
                }

                if (analysis.filename === 'pizza3.glb') {
                    decision.rotationY = 50;
                    decision.reasoning.push('pizza3: rotación óptima aplicada');
                } else if (analysis.filename === 'pizza4.glb') {
                    decision.rotationY = 45;
                    decision.reasoning.push('pizza4: rotación óptima aplicada');
                }

            } else if (analysis.problemCategory === 'normal') {
                decision.strategy = 'standard_optimize';
                decision.scale = 4.0 / Math.max(analysis.maxDim, 0.1);
                decision.reasoning.push('Modelo normal: optimización estándar');
                decision.noAutoRotation = true;

            } else {
                if (analysis.sizeCategory === 'tiny' || analysis.sizeCategory === 'microscopic') {
                    decision.scale = 25.0;
                    decision.reasoning.push('Tamaño microscópico: amplificación extrema');
                } else if (analysis.centerCategory === 'far' || analysis.centerCategory === 'extreme') {
                    decision.centerCorrection = true;
                    decision.scale = 7.0;
                    decision.reasoning.push('Centro lejano: corrección + amplificación');
                }
            }

            decision.reasoning.push(`Estrategia final: ${decision.strategy}`);
            return decision;
        }

        function updateAIPanel() {
            if (!aiAnalysis || !aiDecision) return;

            aiContent.innerHTML = `
                <div class="ai-decision">Estrategia: ${aiDecision.strategy}</div>
                <div class="ai-decision">Escala IA: ${aiDecision.scale}x</div>
                <div class="ai-decision">Rotación IA: ${aiDecision.rotationY}°</div>
                <div class="ai-decision">Centro: ${aiDecision.centerCorrection ? 'Corregido' : 'Original'}</div>
                <br>
                <div class="ai-reasoning">Razonamiento IA:</div>
                ${aiDecision.reasoning.map(r => `<div class="ai-reasoning">• ${r}</div>`).join('')}
                <br>
                <div style="color: #ffff99; font-size: 10px;">
                Análisis: ${aiAnalysis.sizeCategory}, ${aiAnalysis.centerCategory}, ${aiAnalysis.problemCategory}
                </div>
            `;
        }

        function applyAIDecisions() {
            if (!model || !aiDecision) return;

            console.log('🤖 Aplicando IA para:', modelFile, 'Móvil AR:', isMobile && isARActive);

            // CONFIGURACIÓN ESPECIAL PARA MÓVIL AR
            if (isMobile) {
                if (modelFile === 'pizza3.glb' || modelFile === 'pizza4.glb') {
                    // Pizza3/4 en móvil: posición visible
                    model.position.set(0, 0, -2); // Más cerca para que se vea
                    model.scale.set(1.0, 1.0, 1.0); // Escala más grande

                    // Solo aplicar rotación
                    if (modelFile === 'pizza3.glb') {
                        model.rotation.y = 50 * Math.PI / 180;
                    } else {
                        model.rotation.y = 45 * Math.PI / 180;
                    }

                    console.log('🍕 Pizza3/4 móvil configurada:', model.position, model.scale);
                    return; // SALIR AQUÍ para pizza3/4 en móvil
                }
            }

            // RESTO DE LA LÓGICA ORIGINAL para PC y pizza1/2
            if (aiDecision.centerCorrection && !isMobile) {
                const center = aiAnalysis.center;
                model.position.copy(center).negate();
            }

            let finalScale = aiDecision.scale;
            if (isMobile && isARActive) {
                const targetRealSize = 0.30;
                const currentMaxDim = aiAnalysis ? aiAnalysis.maxDim : 1.0;
                finalScale = targetRealSize / currentMaxDim;
            }

            model.scale.set(finalScale, finalScale, finalScale);

            const rotRad = (aiDecision.rotationY * Math.PI) / 180;
            model.rotation.y = rotRad;

            model.position.y = aiDecision.positionY;

            if (!isMobile) {
                const finalBox = new THREE.Box3().setFromObject(model);
                if (finalBox.min.y < 0) {
                    model.position.y = -(finalBox.min.y) + 0.1;
                }
            }

            // Actualizar controles UI
            document.getElementById('scale-slider').value = finalScale;
            document.getElementById('scale-value').textContent = finalScale.toFixed(1);
            document.getElementById('posY-slider').value = model.position.y;
            document.getElementById('posY-value').textContent = model.position.y.toFixed(1);
            document.getElementById('rotY-slider').value = aiDecision.rotationY;
            document.getElementById('rotY-value').textContent = aiDecision.rotationY + '°';

            // FIX: Solo llamar fitCameraToModel en PC
            if (!isMobile) {
                fitCameraToModel();
            }
        }

        function analyzeModel() {
            if (!model) return;

            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            const size = box.getSize(new THREE.Vector3());

            let meshCount = 0;
            let materialCount = 0;
            let vertexCount = 0;

            model.traverse(function (node) {
                if (node.isMesh) {
                    meshCount++;
                    if (node.material) materialCount++;
                    if (node.geometry && node.geometry.attributes.position) {
                        vertexCount += node.geometry.attributes.position.count;
                    }
                }
            });

            const maxDim = Math.max(size.x, size.y, size.z);

            statsContent.innerHTML = `
                <strong>Archivo:</strong> ${modelFile}<br>
                <strong>Dimensiones:</strong> ${size.x.toFixed(3)} × ${size.y.toFixed(3)} × ${size.z.toFixed(3)}<br>
                <strong>Centro:</strong> (${center.x.toFixed(2)}, ${center.y.toFixed(2)}, ${center.z.toFixed(2)})<br>
                <strong>Dim. máxima:</strong> ${maxDim.toFixed(3)}<br>
                <strong>Meshes:</strong> ${meshCount}<br>
                <strong>Materiales:</strong> ${materialCount}<br>
                <strong>Vértices:</strong> ${vertexCount}
            `;
        }

        function autoFitModel() {
            if (!model) return;

            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            const size = box.getSize(new THREE.Vector3());
            const maxDim = Math.max(size.x, size.y, size.z);

            let targetScale = 1;
            if (maxDim > 0) {
                targetScale = 3 / maxDim;
            }

            model.scale.set(targetScale, targetScale, targetScale);
            model.position.copy(center).negate();

            document.getElementById('scale-slider').value = targetScale;
            document.getElementById('scale-value').textContent = targetScale.toFixed(1);
            document.getElementById('posY-slider').value = 0;
            document.getElementById('posY-value').textContent = '0.0';

            // FIX: Solo llamar fitCameraToModel en PC
            if (!isMobile) {
                fitCameraToModel();
            }
        }

        function centerModel() {
            if (!model) return;

            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            model.position.copy(center).negate();

            document.getElementById('posY-slider').value = 0;
            document.getElementById('posY-value').textContent = '0.0';
        }

        function resetCamera() {
            camera.position.set(0, 2, 5);
            camera.lookAt(0, 0, 0);
            
            // FIX: Solo usar controls si existen (no en móvil)
            if (controls) {
                controls.target.set(0, 0, 0);
                controls.update();
            }
        }

        function toggleWireframe() {
            if (!model) return;

            if (wireframeModels.length > 0) {
                wireframeModels.forEach(wf => scene.remove(wf));
                wireframeModels = [];
            } else {
                model.traverse(function (node) {
                    if (node.isMesh && node.geometry) {
                        const wireframe = new THREE.WireframeGeometry(node.geometry);
                        const line = new THREE.LineSegments(wireframe);
                        line.material.color.setHex(0x00ff00);
                        line.position.copy(node.position);
                        line.rotation.copy(node.rotation);
                        line.scale.copy(node.scale);
                        scene.add(line);
                        wireframeModels.push(line);
                    }
                });
            }
        }

        function showBoundingBox() {
            if (!model) return;

            if (boundingBoxHelper) {
                scene.remove(boundingBoxHelper);
                boundingBoxHelper = null;
            } else {
                const box = new THREE.Box3().setFromObject(model);
                boundingBoxHelper = new THREE.Box3Helper(box, 0xff0000);
                scene.add(boundingBoxHelper);
            }
        }

        function fitCameraToModel() {
            if (!model) return;

            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            const size = box.getSize(new THREE.Vector3());
            const maxDim = Math.max(size.x, size.y, size.z);

            const fov = camera.fov * (Math.PI / 180);
            let cameraZ = Math.abs(maxDim / (2 * Math.tan(fov / 2)));
            cameraZ *= 2;

            camera.position.set(center.x, center.y + (size.y / 4), center.z + cameraZ);

            // FIX: Solo usar controls si existen (no en móvil)
            if (controls) {
                controls.target.copy(center);
                controls.update();
            } else {
                // Para móvil: solo hacer que la cámara mire al centro
                camera.lookAt(center);
            }
        }

        function onWindowResize() {
            const canvas = renderer.domElement;
            camera.aspect = canvas.clientWidth / canvas.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(canvas.clientWidth, canvas.clientHeight);
        }

        function animate() {
            requestAnimationFrame(animate);

            if (controls) {
                controls.update();
            }

            // Rotación automática inteligente
            const shouldAutoRotate = aiDecision && !aiDecision.noAutoRotation;
            if (model && document.getElementById('rotY-slider').value == 0 && shouldAutoRotate) {
                model.rotation.y += 0.003;
            }

            renderer.render(scene, camera);
        }

        // === FUNCIONES AR PARA MÓVIL ===

        function createReticle() {
            reticle = new THREE.Group();

            const ring = new THREE.Mesh(
                new THREE.RingGeometry(0.05, 0.07, 24),
                new THREE.MeshBasicMaterial({
                    color: 0x0099ff, side: THREE.DoubleSide,
                    transparent: true, opacity: 0.8
                })
            );
            reticle.add(ring);

            const outerRing = new THREE.Mesh(
                new THREE.RingGeometry(0.08, 0.09, 24),
                new THREE.MeshBasicMaterial({
                    color: 0xffffff, side: THREE.DoubleSide,
                    transparent: true, opacity: 0.5
                })
            );
            reticle.add(outerRing);

            reticle.rotation.x = -Math.PI / 2;
            reticle.visible = false;
            scene.add(reticle);

            function pulse() {
                if (reticle.visible) {
                    const scale = 1 + Math.sin(Date.now() * 0.005) * 0.2;
                    outerRing.scale.set(scale, scale, 1);
                }
                requestAnimationFrame(pulse);
            }
            pulse();
        }

        async function tryAR() {
            console.log('🚀 Intentando AR para:', modelFile);

            if (deviceStatus) deviceStatus.textContent = 'Iniciando AR...';
            arButton.style.display = 'none';

            try {
                // Solicitar cámara directamente
                console.log('📷 Solicitando cámara...');
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { facingMode: 'environment' }
                });

                if (deviceStatus) deviceStatus.textContent = '📷 Cámara obtenida - Verificando AR...';

                // Detener stream de prueba
                stream.getTracks().forEach(track => track.stop());

                // Verificar WebXR
                if (!('xr' in navigator)) {
                    throw new Error('WebXR no disponible');
                }

                const supported = await navigator.xr.isSessionSupported('immersive-ar');
                if (!supported) {
                    throw new Error('AR no soportado');
                }

                // Iniciar sesión AR
                const sessionInit = {
                    requiredFeatures: ['hit-test'],
                    optionalFeatures: ['dom-overlay']
                };

                arSession = await navigator.xr.requestSession('immersive-ar', sessionInit);

                renderer.xr.setReferenceSpaceType('local');
                await renderer.xr.setSession(arSession);

                arSession.addEventListener('select', onARSelect);
                arSession.addEventListener('end', onARSessionEnd);

                // Ocultar modelo hasta colocar
                model.visible = false;

                if (arStatus) arStatus.style.display = 'block';
                if (deviceStatus) deviceStatus.textContent = '📷 AR activo - Busca superficie';

                isARActive = true;
                renderer.setAnimationLoop(renderAR);

            } catch (error) {
                console.error('❌ Error AR:', error);
                if (deviceStatus) deviceStatus.textContent = 'Error AR: ' + error.message;
                arButton.style.display = 'block';
            }
        }

        function onARSelect() {
            console.log('🎯 Superficie tocada');

            if (!reticle.visible || model.visible) return;

            const position = new THREE.Vector3();
            const quaternion = new THREE.Quaternion();
            const scale = new THREE.Vector3();

            reticle.matrix.decompose(position, quaternion, scale);

            console.log('📍 Posición superficie:', position);
            console.log('🔍 Modelo antes:', model, 'Visible:', model.visible);

            // APLICAR IA PARA PIZZA3 EN AR
            if (modelFile === 'pizza3.glb') {
                // Corrección de centro de IA
                const box = new THREE.Box3().setFromObject(model);
                const center = box.getCenter(new THREE.Vector3());
                console.log('📦 Centro del modelo:', center);

                // Posicionar en superficie pero corregir centro
                model.position.copy(position);
                model.position.add(center.clone().negate()); // Corregir centro desplazado
                model.position.y += 0.1; // Subir un poco

                // Escala de IA para AR
                model.scale.set(0.4, 0.4, 0.4); // Escala visible

                // Rotación de IA
                model.rotation.y = 50 * Math.PI / 180;
            }

            // FORZAR VISIBILIDAD BRUTAL
            model.visible = true;
            model.traverse(function (child) {
                if (child.isMesh) {
                    child.visible = true;
                    if (child.material) {
                        child.material.transparent = false;
                        child.material.opacity = 1.0;
                        child.material.side = THREE.DoubleSide;
                    }
                }
            });

            reticle.visible = false;

            console.log('✅ Modelo después:', model.position, model.scale, model.visible);

            if (arStatus) arStatus.style.display = 'none';
            if (deviceStatus) deviceStatus.textContent = 'Pizza3 colocada - Toca para mover';

            setupTouchControls();
        }

        function onARSessionEnd() {
            isARActive = false;
            model.visible = true;
            if (deviceStatus) deviceStatus.textContent = 'AR finalizado - Vista 3D activa';
            if (arButton) arButton.style.display = 'block';

            // Aplicar IA solo si existe
            if (aiDecision && aiAnalysis) {
                applyAIDecisions();
            }
        }

        function renderAR(timestamp, frame) {
            if (!frame || !isARActive) return;

            const session = renderer.xr.getSession();
            const referenceSpace = renderer.xr.getReferenceSpace();

            if (!hitTestSource) {
                session.requestReferenceSpace('viewer').then(viewerSpace => {
                    session.requestHitTestSource({ space: viewerSpace })
                        .then(source => {
                            hitTestSource = source;
                        });
                });
            }

            if (hitTestSource && !model.visible) {
                const hitTestResults = frame.getHitTestResults(hitTestSource);

                if (hitTestResults.length > 0) {
                    const hit = hitTestResults[0];
                    const pose = hit.getPose(referenceSpace);

                    if (pose) {
                        if (arStatus) {
                            arStatus.style.display = 'block';
                            arStatus.textContent = 'Superficie detectada - Toca para colocar';
                            arStatus.style.backgroundColor = 'rgba(76, 175, 80, 0.8)';
                        }

                        reticle.visible = true;
                        reticle.matrix.fromArray(pose.transform.matrix);
                        reticle.matrix.decompose(
                            reticle.position,
                            reticle.quaternion,
                            reticle.scale
                        );
                    }
                } else {
                    reticle.visible = false;
                    if (arStatus) arStatus.style.display = 'none';
                }
            }

            renderer.render(scene, camera);
        }

        function setupTouchControls() {
            const canvas = renderer.domElement;
            let touchStart = null;
            let isTwoFingerGesture = false;
            let initialTouchDistance = 0;
            let initialScale = 1;

            canvas.addEventListener('touchstart', e => {
                e.preventDefault();

                if (e.touches.length === 2) {
                    isTwoFingerGesture = true;
                    const touch1 = e.touches[0];
                    const touch2 = e.touches[1];
                    initialTouchDistance = Math.hypot(
                        touch2.clientX - touch1.clientX,
                        touch2.clientY - touch1.clientY
                    );
                    initialScale = model.scale.x;
                } else if (e.touches.length === 1) {
                    isTwoFingerGesture = false;
                    touchStart = e.touches[0];
                }
            });

            canvas.addEventListener('touchmove', e => {
                e.preventDefault();

                if (isTwoFingerGesture && e.touches.length === 2) {
                    const touch1 = e.touches[0];
                    const touch2 = e.touches[1];
                    const currentTouchDistance = Math.hypot(
                        touch2.clientX - touch1.clientX,
                        touch2.clientY - touch1.clientY
                    );
                    const scaleFactor = currentTouchDistance / initialTouchDistance;
                    const newScale = initialScale * scaleFactor;
                    const scale = Math.max(0.05, Math.min(2.0, newScale));
                    model.scale.set(scale, scale, scale);
                } else if (!isTwoFingerGesture && e.touches.length === 1 && touchStart) {
                    const touch = e.touches[0];
                    const dx = touch.clientX - touchStart.clientX;
                    const dy = touch.clientY - touchStart.clientY;

                    model.rotation.y += dx * 0.01;
                    model.rotation.x += dy * 0.01;

                    touchStart = touch;
                }
            });

            canvas.addEventListener('touchend', e => {
                if (e.touches.length === 0) {
                    isTwoFingerGesture = false;
                    touchStart = null;
                } else if (e.touches.length === 1) {
                    isTwoFingerGesture = false;
                    touchStart = e.touches[0];
                }
            });
        }

        // === INICIALIZACIÓN ===
        document.addEventListener('DOMContentLoaded', function () {
            console.log('=== INICIANDO VISTA AR ===');
            init();
        });
    </script>
</body>
</html>