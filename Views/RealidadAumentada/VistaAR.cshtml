<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vista 3D con AR - @ViewBag.ProductoNombre</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/loaders/GLTFLoader.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            overflow: hidden;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            user-select: none;
        }

        /* Canvas Container */
        .canvas-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 1;
        }

        canvas {
            width: 100%;
            height: 100%;
            display: block;
            cursor: grab;
        }

            canvas:active {
                cursor: grabbing;
            }

        /* Modern Header - Simplified */
        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(30px);
            -webkit-backdrop-filter: blur(30px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 20;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

            .header.hidden {
                transform: translateY(-100%);
                opacity: 0;
            }

        .header-content {
            text-align: center;
        }

            .header-content h1 {
                font-size: 1.8rem;
                font-weight: 700;
                margin-bottom: 8px;
                background: linear-gradient(135deg, #fff 0%, #a855f7 50%, #3b82f6 100%);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
                letter-spacing: -0.02em;
            }

            .header-content .subtitle {
                opacity: 0.8;
                font-size: 0.9rem;
                font-weight: 400;
                color: rgba(255, 255, 255, 0.9);
            }

        .header-actions {
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            gap: 12px;
        }

        /* Modern Buttons */
        .btn {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 8px 16px;
            border-radius: 12px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            font-size: 13px;
            font-weight: 500;
            transition: all 0.3s ease;
            white-space: nowrap;
        }

            .btn:hover {
                background: rgba(255, 255, 255, 0.25);
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            }

            .btn:active {
                transform: translateY(0);
            }

        .btn-primary {
            background: linear-gradient(45deg, #4f46e5, #7c3aed);
            border: none;
        }

        .btn-success {
            background: linear-gradient(45deg, #059669, #0d9488);
            border: none;
        }

        .btn-warning {
            background: linear-gradient(45deg, #d97706, #ea580c);
            border: none;
        }

        /* Floating Panels - Mobile Style for All Devices */
        .panel {
            position: fixed;
            background: rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(25px);
            -webkit-backdrop-filter: blur(25px);
            border: 1px solid rgba(255, 255, 255, 0.08);
            border-radius: 25px 25px 0 0;
            padding: 24px;
            z-index: 15;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            /* Position all panels at bottom, stacked */
            bottom: 0;
            left: 0;
            right: 0;
            width: auto;
            max-width: 100vw;
            transform: translateY(100%);
        }

            .panel.visible {
                transform: translateY(0);
            }

            .panel.hidden {
                transform: translateY(100%);
                opacity: 1;
                pointer-events: none;
            }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 12px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .panel-title {
            font-size: 1.1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
            background: linear-gradient(135deg, #fff 0%, #e0e7ff 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .panel-close {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: rgba(255, 255, 255, 0.8);
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 16px;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .panel-close:hover {
                background: rgba(255, 255, 255, 0.2);
                color: white;
                transform: scale(1.1);
            }

        /* Specific Panel Styling */
        .ai-panel {
            background: rgba(16, 185, 129, 0.12);
            border-color: rgba(16, 185, 129, 0.25);
        }

        .control-group {
            margin-bottom: 16px;
        }

            .control-group:last-child {
                margin-bottom: 0;
            }

        /* Stats Panel Content */
        .stat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            transition: all 0.2s ease;
        }

            .stat-item:last-child {
                border-bottom: none;
            }

            .stat-item:hover {
                background: rgba(255, 255, 255, 0.03);
                border-radius: 8px;
                padding-left: 8px;
                padding-right: 8px;
            }

        .stat-label {
            opacity: 0.85;
            font-weight: 500;
        }

        .stat-value {
            font-weight: 600;
            color: #60a5fa;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        }

        /* AI Panel Content */
        .ai-decision {
            color: #10b981;
            font-weight: 600;
            margin-bottom: 10px;
            padding: 8px 12px;
            background: rgba(16, 185, 129, 0.1);
            border-radius: 8px;
            border-left: 3px solid #10b981;
        }

        .ai-reasoning {
            color: #6ee7b7;
            font-style: italic;
            opacity: 0.9;
            margin-bottom: 8px;
            padding: 6px 12px;
            background: rgba(110, 231, 183, 0.05);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .control-label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
            font-size: 14px;
            font-weight: 500;
        }

        .control-value {
            color: #60a5fa;
            font-weight: 600;
            font-size: 13px;
        }

        .control-slider {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: rgba(255, 255, 255, 0.2);
            outline: none;
            appearance: none;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .control-slider::-webkit-slider-thumb {
                appearance: none;
                width: 18px;
                height: 18px;
                border-radius: 50%;
                background: linear-gradient(45deg, #60a5fa, #3b82f6);
                cursor: pointer;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
                transition: all 0.2s ease;
            }

                .control-slider::-webkit-slider-thumb:hover {
                    transform: scale(1.1);
                    box-shadow: 0 4px 12px rgba(96, 165, 250, 0.4);
                }

            .control-slider::-moz-range-thumb {
                width: 18px;
                height: 18px;
                border-radius: 50%;
                background: linear-gradient(45deg, #60a5fa, #3b82f6);
                cursor: pointer;
                border: none;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            }

        .control-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: 16px;
        }

        /* Loading & Error States */
        .loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(20px);
            padding: 30px 40px;
            border-radius: 20px;
            text-align: center;
            z-index: 30;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #60a5fa;
            animation: spin 1s ease-in-out infinite;
            margin: 0 auto 16px;
        }

        @@keyframes spin {
            to

        {
            transform: rotate(360deg);
        }

        }

        .error {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(239, 68, 68, 0.2);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(239, 68, 68, 0.4);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            max-width: 400px;
            z-index: 30;
            display: none;
        }

            .error h3 {
                margin-bottom: 12px;
                color: #fca5a5;
            }

        /* Panel Toggle Button - Now for All Devices */
        .panel-toggle {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: linear-gradient(135deg, #4f46e5, #7c3aed);
            border: none;
            border-radius: 50%;
            width: 64px;
            height: 64px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            color: white;
            cursor: pointer;
            z-index: 25;
            box-shadow: 0 12px 30px rgba(79, 70, 229, 0.4);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

            .panel-toggle:hover {
                transform: scale(1.1);
                box-shadow: 0 15px 35px rgba(79, 70, 229, 0.6);
            }

            .panel-toggle:active {
                transform: scale(0.95);
            }

        /* AR Toggle Button - Bottom Left */
        .ar-toggle {
            position: fixed;
            bottom: 30px;
            left: 30px;
            background: linear-gradient(135deg, #f97316, #ea580c);
            border: none;
            border-radius: 50%;
            width: 64px;
            height: 64px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            color: white;
            cursor: pointer;
            z-index: 25;
            box-shadow: 0 12px 30px rgba(249, 115, 22, 0.4);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

            .ar-toggle:hover {
                transform: scale(1.1);
                box-shadow: 0 15px 35px rgba(249, 115, 22, 0.6);
            }

            .ar-toggle:active {
                transform: scale(0.95);
            }

            .ar-toggle.active {
                background: linear-gradient(135deg, #10b981, #059669);
                box-shadow: 0 12px 30px rgba(16, 185, 129, 0.4);
            }

                .ar-toggle.active:hover {
                    box-shadow: 0 15px 35px rgba(16, 185, 129, 0.6);
                }

        /* Hide Header Toggle */
        .header-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: none;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            z-index: 21;
            transition: all 0.3s ease;
        }

            .header-toggle:hover {
                background: rgba(0, 0, 0, 0.5);
            }

        /* Responsive Design - Unified Experience */
        @@media (max-width: 768px) {
            .header-actions

        {
            display: none;
        }

        .header-content h1 {
            font-size: 1.3rem;
        }

        .header-content .subtitle {
            font-size: 0.8rem;
        }

        .panel {
            margin: 0;
            padding: 20px 16px;
            border-radius: 25px 25px 0 0;
        }

        .panel-toggle {
            width: 56px;
            height: 56px;
            bottom: 20px;
            right: 20px;
            font-size: 24px;
        }

        .ar-toggle {
            width: 56px;
            height: 56px;
            bottom: 20px;
            left: 20px;
            font-size: 24px;
        }

        .header {
            padding: 16px 20px;
            justify-content: center;
        }

        .control-slider {
            height: 8px;
        }

            .control-slider::-webkit-slider-thumb {
                width: 24px;
                height: 24px;
            }

        }

        @@media (max-width: 480px) {
            .panel

        {
            padding: 16px 14px;
        }

        .header {
            padding: 12px 16px;
        }

        .header-content h1 {
            font-size: 1.2rem;
        }

        .header-content .subtitle {
            font-size: 0.75rem;
        }

        }

        /* Desktop specific enhancements */
        @@media (min-width: 769px) {
            .panel

        {
            margin: 0 60px;
            border-radius: 25px 25px 0 0;
            max-width: calc(100vw - 120px);
        }

        .panel:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
        }

        .panel.visible:hover {
            transform: translateY(-5px);
        }

        .header:hover {
            background: rgba(0, 0, 0, 0.25);
            backdrop-filter: blur(35px);
        }

        /* Subtle glow effects for desktop */
        .ai-panel::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.3), rgba(16, 185, 129, 0.1));
            border-radius: 27px;
            z-index: -1;
            opacity: 0.6;
            filter: blur(8px);
        }

        }

        /* Hover Effects - Enhanced */
        .panel:hover {
            border-color: rgba(255, 255, 255, 0.15);
        }

        /* Smooth Animations */
        .fade-in {
            animation: fadeIn 0.5s ease-out;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header" id="header">
        <div class="header-content">
            <h1>@ViewBag.ProductoNombre</h1>
            <div class="subtitle">Modelo 3D • ID: @ViewBag.ProductoId</div>
        </div>
        <div class="header-actions">
            <button class="btn" onclick="history.back()">← Volver</button>
            <button class="btn btn-success" onclick="app.resetCamera()">🔄 Reset</button>
            <button class="btn" onclick="app.toggleWireframe()">⚡ Wireframe</button>
        </div>
    </div>

    <!-- Canvas -->
    <div class="canvas-container">
        <canvas id="canvas3d"></canvas>
    </div>

    <!-- Loading -->
    <div class="loading" id="loading">
        <div class="loading-spinner"></div>
        <div>Cargando modelo 3D...</div>
    </div>

    <!-- Error -->
    <div class="error" id="error">
        <h3>⚠️ Error al cargar</h3>
        <p id="error-message">Ha ocurrido un error</p>
        <button class="btn btn-primary" onclick="app.reload()" style="margin-top: 16px;">🔄 Reintentar</button>
    </div>

    <!-- Stats Panel -->
    <div class="panel stats-panel fade-in" id="stats-panel">
        <div class="panel-header">
            <div class="panel-title">📊 Estadísticas</div>
            <button class="panel-close" onclick="togglePanel('stats-panel')">&times;</button>
        </div>
        <div id="stats-content">
            <div class="stat-item">
                <span class="stat-label">Analizando...</span>
                <span class="stat-value">⏳</span>
            </div>
        </div>
    </div>

    <!-- AI Panel -->
    <div class="panel ai-panel fade-in" id="ai-panel">
        <div class="panel-header">
            <div class="panel-title">🤖 Sistema IA</div>
            <button class="panel-close" onclick="togglePanel('ai-panel')">&times;</button>
        </div>
        <div id="ai-content">
            <div class="ai-decision">Analizando modelo...</div>
        </div>
    </div>

    <!-- Controls Panel -->
    <div class="panel controls-panel fade-in" id="controls-panel">
        <div class="panel-header">
            <div class="panel-title">🎮 Controles</div>
            <button class="panel-close" onclick="togglePanel('controls-panel')">&times;</button>
        </div>

        <div class="control-group">
            <div class="control-label">
                <span>Escala</span>
                <span class="control-value" id="scale-value">1.0</span>
            </div>
            <input type="range" id="scale-slider" class="control-slider" min="0.1" max="10" step="0.1" value="1.0">
        </div>

        <div class="control-group">
            <div class="control-label">
                <span>Posición Y</span>
                <span class="control-value" id="posY-value">0.0</span>
            </div>
            <input type="range" id="posY-slider" class="control-slider" min="-5" max="5" step="0.1" value="0.0">
        </div>

        <div class="control-group">
            <div class="control-label">
                <span>Rotación Y</span>
                <span class="control-value" id="rotY-value">0°</span>
            </div>
            <input type="range" id="rotY-slider" class="control-slider" min="0" max="360" step="5" value="0">
        </div>

        <div class="control-buttons">
            <button class="btn btn-success" onclick="app.autoFit()">✨ Auto Ajustar</button>
            <button class="btn" onclick="app.center()">🎯 Centrar</button>
        </div>
    </div>

    <!-- Panel Toggle Button (All Devices) -->
    <button class="panel-toggle" id="panel-toggle" onclick="togglePanels()">🎮</button>

    <!-- AR Toggle Button (All Devices) -->
    <button class="ar-toggle" id="ar-toggle" onclick="toggleAR()">📷</button>

    <script>
        // Desktop 3D Viewer Class - Enhanced UX
        class DesktopViewer {
            constructor() {
                // Core variables
                this.scene = null;
                this.camera = null;
                this.renderer = null;
                this.controls = null;
                this.model = null;

                // AR variables
                this.reticle = null;
                this.arSession = null;
                this.hitTestSource = null;
                this.isARActive = false;
                this.isARSupported = false;
                this.modelStateBeforeAR = null; // Store model state before AR

                // Config
                this.config = {
                    modelPath: '@ViewBag.ModeloPath',
                    modelFile: '@ViewBag.ModeloArchivo',
                    modelId: '@ViewBag.ProductoId'
                };

                // AI system
                this.aiAnalysis = null;
                this.aiDecision = null;

                // UI State
                this.panelsVisible = false; // Always start with panels hidden
                this.headerVisible = true;
                this.currentPanel = null;

                // DOM references
                this.dom = {
                    loading: document.getElementById('loading'),
                    error: document.getElementById('error'),
                    errorMessage: document.getElementById('error-message'),
                    statsContent: document.getElementById('stats-content'),
                    aiContent: document.getElementById('ai-content'),
                    scaleSlider: document.getElementById('scale-slider'),
                    posYSlider: document.getElementById('posY-slider'),
                    rotYSlider: document.getElementById('rotY-slider'),
                    scaleValue: document.getElementById('scale-value'),
                    posYValue: document.getElementById('posY-value'),
                    rotYValue: document.getElementById('rotY-value'),
                    header: document.getElementById('header'),
                    statsPanel: document.getElementById('stats-panel'),
                    aiPanel: document.getElementById('ai-panel'),
                    controlsPanel: document.getElementById('controls-panel')
                };

                this.init();
            }

            // Initialize Three.js
            init() {
                console.log('🚀 Inicializando Enhanced Desktop Viewer:', this.config.modelFile);

                try {
                    this.setupScene();
                    this.setupCamera();
                    this.setupRenderer();
                    this.setupLights();
                    this.setupControls();
                    this.setupEventListeners();
                    this.setupUI();
                    this.loadModel();
                    this.animate();
                } catch (error) {
                    this.showError('Error de inicialización: ' + error.message);
                }
            }

            setupScene() {
                this.scene = new THREE.Scene();
                // Create a more sophisticated background for normal view
                const loader = new THREE.CubeTextureLoader();
                this.backgroundTexture = new THREE.CubeTextureLoader().load([
                    'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="1" height="1"><rect width="1" height="1" fill="%23667eea"/></svg>',
                    'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="1" height="1"><rect width="1" height="1" fill="%23667eea"/></svg>',
                    'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="1" height="1"><rect width="1" height="1" fill="%23764ba2"/></svg>',
                    'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="1" height="1"><rect width="1" height="1" fill="%23764ba2"/></svg>',
                    'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="1" height="1"><rect width="1" height="1" fill="%23667eea"/></svg>',
                    'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="1" height="1"><rect width="1" height="1" fill="%23667eea"/></svg>'
                ]);
                this.scene.background = this.backgroundTexture;
            }

            setupCamera() {
                this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 1000);
                this.camera.position.set(0, 2, 5);
            }

            setupRenderer() {
                const canvas = document.getElementById('canvas3d');
                this.renderer = new THREE.WebGLRenderer({
                    canvas: canvas,
                    antialias: true,
                    alpha: true // Enable alpha for AR transparency
                });
                this.renderer.setSize(window.innerWidth, window.innerHeight);
                this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
                this.renderer.shadowMap.enabled = true;
                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
                this.renderer.toneMapping = THREE.ACESFilmicToneMapping;
                this.renderer.toneMappingExposure = 1.2;

                // Enable AR support
                this.renderer.xr.enabled = true;
                this.checkARSupport();
            }

            setupLights() {
                // Enhanced lighting setup
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);
                this.scene.add(ambientLight);

                const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
                directionalLight.position.set(5, 10, 5);
                directionalLight.castShadow = true;
                directionalLight.shadow.mapSize.width = 2048;
                directionalLight.shadow.mapSize.height = 2048;
                directionalLight.shadow.camera.near = 0.5;
                directionalLight.shadow.camera.far = 50;
                this.scene.add(directionalLight);

                // Add rim lighting
                const rimLight = new THREE.DirectionalLight(0x64b5f6, 0.5);
                rimLight.position.set(-3, 2, -3);
                this.scene.add(rimLight);

                // Add fill light
                const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
                fillLight.position.set(0, -5, 10);
                this.scene.add(fillLight);
            }

            setupControls() {
                this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
                this.controls.enableDamping = true;
                this.controls.dampingFactor = 0.05;
                this.controls.screenSpacePanning = false;
                this.controls.minDistance = 1;
                this.controls.maxDistance = 20;
                this.controls.maxPolarAngle = Math.PI / 1.8;
            }

            setupEventListeners() {
                window.addEventListener('resize', () => this.onResize());

                // Control sliders with enhanced feedback
                if (this.dom.scaleSlider) {
                    this.dom.scaleSlider.addEventListener('input', (e) => {
                        this.updateScale(e.target.value);
                        this.addControlFeedback(e.target);
                    });
                }
                if (this.dom.posYSlider) {
                    this.dom.posYSlider.addEventListener('input', (e) => {
                        this.updatePositionY(e.target.value);
                        this.addControlFeedback(e.target);
                    });
                }
                if (this.dom.rotYSlider) {
                    this.dom.rotYSlider.addEventListener('input', (e) => {
                        this.updateRotationY(e.target.value);
                        this.addControlFeedback(e.target);
                    });
                }

                // Auto-hide header on scroll/interaction
                let headerTimeout;
                document.addEventListener('mousemove', () => {
                    if (this.config.isMobile) return;
                    this.showHeader();
                    clearTimeout(headerTimeout);
                    headerTimeout = setTimeout(() => this.hideHeader(), 3000);
                });
            }

            setupUI() {
                // Initialize all panels as hidden for unified experience
                this.dom.statsPanel.classList.add('hidden');
                this.dom.aiPanel.classList.add('hidden');
                this.dom.controlsPanel.classList.add('hidden');
                this.currentPanel = null;

                // Add panel animations
                setTimeout(() => {
                    this.dom.statsPanel.classList.add('fade-in');
                    this.dom.aiPanel.classList.add('fade-in');
                    this.dom.controlsPanel.classList.add('fade-in');
                }, 500);
            }

            addControlFeedback(element) {
                element.style.boxShadow = '0 0 20px rgba(96, 165, 250, 0.6)';
                setTimeout(() => {
                    element.style.boxShadow = '';
                }, 200);
            }

            showHeader() {
                if (this.dom.header) {
                    this.dom.header.classList.remove('hidden');
                    this.headerVisible = true;
                }
            }

            hideHeader() {
                if (this.dom.header && !this.config.isMobile) {
                    this.dom.header.classList.add('hidden');
                    this.headerVisible = false;
                }
            }

            // Model Loading with enhanced progress
            loadModel() {
                console.log('🔄 Cargando modelo:', this.config.modelPath);

                if (!this.config.modelPath) {
                    this.showError('Ruta del modelo no definida');
                    return;
                }

                const loader = new THREE.GLTFLoader();

                loader.load(
                    this.config.modelPath,
                    (gltf) => this.onModelLoaded(gltf),
                    (xhr) => this.onLoadProgress(xhr),
                    (error) => this.onLoadError(error)
                );
            }

            onModelLoaded(gltf) {
                console.log('✅ Modelo cargado:', this.config.modelFile);

                this.hideLoading();
                this.model = gltf.scene;

                // Enhanced model configuration
                this.model.traverse((node) => {
                    if (node.isMesh) {
                        node.castShadow = true;
                        node.receiveShadow = true;

                        // Enhance materials
                        if (node.material) {
                            node.material.envMapIntensity = 0.8;
                        }
                    }
                });

                this.scene.add(this.model);
                this.model.visible = true;

                this.runAI();
                this.analyzeModel();

                // Smooth entrance animation with auto-fit
                this.model.scale.set(0, 0, 0);
                const targetScale = this.aiDecision ? this.aiDecision.scale : 1;
                this.animateScale(targetScale, () => {
                    // Auto-fit camera after model loads and IA is applied
                    setTimeout(() => {
                        this.autoFit();
                        console.log('✨ Modelo autoajustado automáticamente');
                    }, 300);
                });
            }

            animateScale(targetScale, callback) {
                const startScale = 0;
                const duration = 1000;
                const startTime = Date.now();

                const animate = () => {
                    const elapsed = Date.now() - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    const easeOut = 1 - Math.pow(1 - progress, 3);
                    const currentScale = startScale + (targetScale - startScale) * easeOut;

                    this.model.scale.set(currentScale, currentScale, currentScale);

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else if (callback) {
                        callback(); // Execute callback when animation is complete
                    }
                };

                animate();
            }

            onLoadProgress(xhr) {
                if (xhr.lengthComputable && this.dom.loading) {
                    const percent = Math.floor((xhr.loaded / xhr.total) * 100);
                    this.dom.loading.querySelector('div:last-child').textContent = `Cargando modelo... ${percent}%`;
                }
            }

            onLoadError(error) {
                console.error('❌ Error cargando modelo:', error);
                this.showError(`Error de carga: ${error.message || 'Error desconocido'}`);
            }

            // Enhanced AI System
            runAI() {
                try {
                    this.aiAnalysis = this.analyzeModelAI();
                    this.aiDecision = this.makeAIDecision();
                    this.updateAIPanel();
                    this.applyAIDecisions();
                    console.log('🤖 IA aplicada exitosamente');
                } catch (error) {
                    console.error('🔴 Error en IA:', error);
                }
            }

            analyzeModelAI() {
                if (!this.model) return null;

                const box = new THREE.Box3().setFromObject(this.model);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());
                const maxDim = Math.max(size.x, size.y, size.z);

                return {
                    center,
                    size,
                    maxDim,
                    problemType: this.classifyProblem(),
                    sizeType: maxDim < 0.5 ? 'small' : maxDim > 10 ? 'large' : 'normal'
                };
            }

            classifyProblem() {
                if (this.config.modelFile.includes('pizza3') || this.config.modelFile.includes('pizza4')) {
                    return 'displaced_center_small';
                }
                return 'normal';
            }

            makeAIDecision() {
                if (!this.aiAnalysis) return null;

                let decision = {
                    scale: 1.0,
                    rotationY: 0,
                    centerCorrection: false,
                    strategy: 'standard'
                };

                if (this.aiAnalysis.problemType === 'displaced_center_small') {
                    decision.strategy = 'fix_displacement';
                    decision.centerCorrection = true;
                    decision.scale = this.aiAnalysis.maxDim < 0.5 ? 20.0 : 8.0;

                    if (this.config.modelFile.includes('pizza3')) {
                        decision.rotationY = 50;
                    } else if (this.config.modelFile.includes('pizza4')) {
                        decision.rotationY = 45;
                    }
                } else if (this.aiAnalysis.sizeType === 'small') {
                    decision.scale = 4.0 / Math.max(this.aiAnalysis.maxDim, 0.1);
                }

                return decision;
            }

            applyAIDecisions() {
                if (!this.model || !this.aiDecision) return;

                console.log('🤖 Aplicando decisiones IA');

                if (this.aiDecision.centerCorrection) {
                    this.model.position.copy(this.aiAnalysis.center).negate();
                }

                this.model.rotation.y = this.aiDecision.rotationY * Math.PI / 180;

                // Update UI controls (but don't fit camera yet - will be done in autoFit)
                this.updateControlValues();
            }

            updateAIPanel() {
                if (!this.aiDecision || !this.dom.aiContent) return;

                this.dom.aiContent.innerHTML = `
                    <div class="ai-decision">✨ Estrategia: ${this.aiDecision.strategy}</div>
                    <div class="ai-decision">📏 Escala: ${this.aiDecision.scale.toFixed(1)}x</div>
                    <div class="ai-decision">🔄 Rotación: ${this.aiDecision.rotationY}°</div>
                    <div class="ai-reasoning">🎯 Centro: ${this.aiDecision.centerCorrection ? 'Corregido automáticamente' : 'Posición original'}</div>
                    <div class="ai-reasoning">🧠 Optimización aplicada para mejor visualización</div>
                `;
            }

            // Enhanced Control Functions
            updateScale(value) {
                if (this.model) {
                    const scale = parseFloat(value);
                    this.model.scale.set(scale, scale, scale);
                    if (this.dom.scaleValue) this.dom.scaleValue.textContent = scale.toFixed(1) + 'x';
                }
            }

            updatePositionY(value) {
                if (this.model) {
                    const posY = parseFloat(value);
                    this.model.position.y = posY;
                    if (this.dom.posYValue) this.dom.posYValue.textContent = posY.toFixed(1);
                }
            }

            updateRotationY(value) {
                if (this.model) {
                    const rotY = parseFloat(value) * Math.PI / 180;
                    this.model.rotation.y = rotY;
                    if (this.dom.rotYValue) this.dom.rotYValue.textContent = value + '°';
                }
            }

            updateControlValues() {
                if (!this.model || !this.aiDecision) return;

                if (this.dom.scaleSlider) this.dom.scaleSlider.value = this.aiDecision.scale;
                if (this.dom.scaleValue) this.dom.scaleValue.textContent = this.aiDecision.scale.toFixed(1) + 'x';
                if (this.dom.posYSlider) this.dom.posYSlider.value = this.model.position.y;
                if (this.dom.posYValue) this.dom.posYValue.textContent = this.model.position.y.toFixed(1);
                if (this.dom.rotYSlider) this.dom.rotYSlider.value = this.aiDecision.rotationY;
                if (this.dom.rotYValue) this.dom.rotYValue.textContent = this.aiDecision.rotationY + '°';
            }

            // Enhanced Model Analysis
            analyzeModel() {
                if (!this.model || !this.dom.statsContent) return;

                const box = new THREE.Box3().setFromObject(this.model);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());

                let meshCount = 0;
                let vertexCount = 0;
                let materialCount = 0;
                const materials = new Set();

                this.model.traverse((node) => {
                    if (node.isMesh) {
                        meshCount++;
                        if (node.geometry?.attributes.position) {
                            vertexCount += node.geometry.attributes.position.count;
                        }
                        if (node.material) {
                            if (Array.isArray(node.material)) {
                                node.material.forEach(mat => materials.add(mat));
                            } else {
                                materials.add(node.material);
                            }
                        }
                    }
                });

                materialCount = materials.size;

                this.dom.statsContent.innerHTML = `
                    <div class="stat-item">
                        <span class="stat-label">📄 Archivo</span>
                        <span class="stat-value">${this.config.modelFile}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">📐 Dimensiones</span>
                        <span class="stat-value">${size.x.toFixed(1)} × ${size.y.toFixed(1)} × ${size.z.toFixed(1)}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">🔷 Meshes</span>
                        <span class="stat-value">${meshCount}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">📊 Vértices</span>
                        <span class="stat-value">${vertexCount.toLocaleString()}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">🎨 Materiales</span>
                        <span class="stat-value">${materialCount}</span>
                    </div>
                `;
            }

            // Enhanced Utility Functions
            autoFit() {
                if (!this.model) return;

                const box = new THREE.Box3().setFromObject(this.model);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());
                const maxDim = Math.max(size.x, size.y, size.z);

                const targetScale = maxDim > 0 ? 3 / maxDim : 1;

                // Animate the auto-fit
                this.animateToValues({
                    scale: targetScale,
                    position: center.clone().negate(),
                    camera: true
                });
            }

            center() {
                if (!this.model) return;

                const box = new THREE.Box3().setFromObject(this.model);
                const center = box.getCenter(new THREE.Vector3());

                this.animateToValues({
                    position: center.clone().negate()
                });
            }

            animateToValues(targets) {
                if (!this.model) return;

                const duration = 800;
                const startTime = Date.now();
                const startScale = this.model.scale.x;
                const startPos = this.model.position.clone();

                const animate = () => {
                    const elapsed = Date.now() - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    const easeInOut = progress < 0.5
                        ? 2 * progress * progress
                        : 1 - Math.pow(-2 * progress + 2, 3) / 2;

                    if (targets.scale !== undefined) {
                        const currentScale = startScale + (targets.scale - startScale) * easeInOut;
                        this.model.scale.set(currentScale, currentScale, currentScale);
                        if (this.dom.scaleSlider) this.dom.scaleSlider.value = currentScale;
                        if (this.dom.scaleValue) this.dom.scaleValue.textContent = currentScale.toFixed(1) + 'x';
                    }

                    if (targets.position) {
                        this.model.position.lerpVectors(startPos, targets.position, easeInOut);
                        if (this.dom.posYSlider) this.dom.posYSlider.value = this.model.position.y;
                        if (this.dom.posYValue) this.dom.posYValue.textContent = this.model.position.y.toFixed(1);
                    }

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else if (targets.camera) {
                        this.fitCameraToModel();
                    }
                };

                animate();
            }

            resetCamera() {
                // Smooth camera reset
                const startPos = this.camera.position.clone();
                const targetPos = new THREE.Vector3(0, 2, 5);
                const duration = 1000;
                const startTime = Date.now();

                const animate = () => {
                    const elapsed = Date.now() - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    const easeOut = 1 - Math.pow(1 - progress, 3);

                    this.camera.position.lerpVectors(startPos, targetPos, easeOut);
                    this.camera.lookAt(0, 0, 0);

                    if (this.controls) {
                        this.controls.target.set(0, 0, 0);
                        this.controls.update();
                    }

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    }
                };

                animate();
            }

            toggleWireframe() {
                if (!this.model) return;

                this.model.traverse((node) => {
                    if (node.isMesh && node.material) {
                        if (Array.isArray(node.material)) {
                            node.material.forEach(mat => mat.wireframe = !mat.wireframe);
                        } else {
                            node.material.wireframe = !node.material.wireframe;
                        }
                    }
                });
            }

            fitCameraToModel() {
                if (!this.model || !this.camera) return;

                const box = new THREE.Box3().setFromObject(this.model);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());
                const maxDim = Math.max(size.x, size.y, size.z);

                const fov = this.camera.fov * (Math.PI / 180);
                const cameraZ = Math.abs(maxDim / (2 * Math.tan(fov / 2))) * 1.5;

                const targetPos = new THREE.Vector3(center.x, center.y + size.y / 4, center.z + cameraZ);

                // Smooth camera movement
                const startPos = this.camera.position.clone();
                const duration = 1000;
                const startTime = Date.now();

                const animate = () => {
                    const elapsed = Date.now() - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    const easeOut = 1 - Math.pow(1 - progress, 3);

                    this.camera.position.lerpVectors(startPos, targetPos, easeOut);

                    if (this.controls) {
                        this.controls.target.lerp(center, easeOut);
                        this.controls.update();
                    } else {
                        this.camera.lookAt(center);
                    }

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    }
                };

                animate();
            }

            // Event Handlers
            onResize() {
                if (!this.camera || !this.renderer) return;

                this.camera.aspect = window.innerWidth / window.innerHeight;
                this.camera.updateProjectionMatrix();
                this.renderer.setSize(window.innerWidth, window.innerHeight);
            }

            showError(message) {
                console.error('❌', message);
                if (this.dom.errorMessage) this.dom.errorMessage.textContent = message;
                this.hideLoading();
                if (this.dom.error) this.dom.error.style.display = 'block';
            }

            hideLoading() {
                if (this.dom.loading) this.dom.loading.style.display = 'none';
            }

            reload() {
                location.reload();
            }

            // Animation Loop
            animate() {
                requestAnimationFrame(() => this.animate());

                if (this.controls) {
                    this.controls.update();
                }

                // Enhanced auto rotation with smooth motion
                if (this.model && this.aiDecision && this.aiDecision.strategy !== 'standard' &&
                    this.dom.rotYSlider && this.dom.rotYSlider.value == 0) {
                    this.model.rotation.y += 0.002;
                }

                if (this.renderer && this.scene && this.camera) {
                    this.renderer.render(this.scene, this.camera);
                }
            }

            // AR Functionality
            async checkARSupport() {
                try {
                    if (navigator.xr) {
                        this.isARSupported = await navigator.xr.isSessionSupported('immersive-ar');
                        console.log('AR Support:', this.isARSupported);

                        if (this.isARSupported) {
                            this.createReticle();
                        }
                    }
                } catch (error) {
                    console.log('AR no disponible:', error);
                    this.isARSupported = false;
                }
            }

            createReticle() {
                this.reticle = new THREE.Group();

                // Main ring
                const ring = new THREE.Mesh(
                    new THREE.RingGeometry(0.05, 0.07, 24),
                    new THREE.MeshBasicMaterial({
                        color: 0x0099ff,
                        side: THREE.DoubleSide,
                        transparent: true,
                        opacity: 0.8
                    })
                );
                this.reticle.add(ring);

                // Outer ring with animation
                const outerRing = new THREE.Mesh(
                    new THREE.RingGeometry(0.08, 0.09, 24),
                    new THREE.MeshBasicMaterial({
                        color: 0xffffff,
                        side: THREE.DoubleSide,
                        transparent: true,
                        opacity: 0.5
                    })
                );
                this.reticle.add(outerRing);

                // Horizontal Grid pattern for surface detection
                const gridGeometry = new THREE.PlaneGeometry(0.5, 0.5, 10, 10);
                const gridMaterial = new THREE.MeshBasicMaterial({
                    color: 0x00ff00,
                    transparent: true,
                    opacity: 0.3,
                    wireframe: true,
                    side: THREE.DoubleSide
                });
                const grid = new THREE.Mesh(gridGeometry, gridMaterial);

                this.reticle.add(grid);
                this.reticle.rotation.x = -Math.PI / 2;  // Make horizontal
                this.reticle.visible = false;
                this.scene.add(this.reticle);

                // Animate the reticle
                const animateReticle = () => {
                    if (this.reticle && this.reticle.visible) {
                        const time = Date.now() * 0.005;
                        outerRing.scale.set(
                            1 + Math.sin(time) * 0.2,
                            1 + Math.sin(time) * 0.2,
                            1
                        );
                        grid.material.opacity = 0.2 + Math.sin(time * 2) * 0.1;
                    }
                    requestAnimationFrame(animateReticle);
                };
                animateReticle();

                console.log('✅ Reticle horizontal creado');
            }

            async startAR() {
                if (!this.isARSupported) {
                    alert('AR no está disponible en este dispositivo/navegador');
                    return;
                }

                try {
                    console.log('🚀 Iniciando AR');

                    // Request camera permissions
                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: {
                            facingMode: 'environment',
                            width: { ideal: 1280 },
                            height: { ideal: 720 }
                        }
                    });

                    stream.getTracks().forEach(track => track.stop()); // Stop test stream

                    // Request AR session
                    const sessionInit = {
                        requiredFeatures: ['hit-test'],
                        optionalFeatures: ['dom-overlay']
                    };

                    this.arSession = await navigator.xr.requestSession('immersive-ar', sessionInit);
                    console.log('✅ Sesión AR creada');

                    // Configure renderer for AR
                    this.renderer.xr.setReferenceSpaceType('local');
                    await this.renderer.xr.setSession(this.arSession);

                    // Setup AR event handlers
                    this.arSession.addEventListener('select', () => this.onARSelect());
                    this.arSession.addEventListener('end', () => this.onAREnd());

                    // Store current model state before entering AR
                    if (this.model) {
                        this.modelStateBeforeAR = {
                            position: this.model.position.clone(),
                            rotation: this.model.rotation.clone(),
                            scale: this.model.scale.clone(),
                            visible: this.model.visible
                        };
                        this.model.visible = false;
                    }

                    // Set transparent background for AR
                    this.scene.background = null;

                    this.isARActive = true;

                    // Update AR button
                    const arButton = document.getElementById('ar-toggle');
                    if (arButton) {
                        arButton.classList.add('active');
                        arButton.textContent = '🔴';
                    }

                    console.log('🎯 AR iniciado correctamente');

                    // Start AR render loop
                    this.renderer.setAnimationLoop((timestamp, frame) => this.renderAR(timestamp, frame));

                } catch (error) {
                    console.error('❌ Error iniciando AR:', error);

                    let errorMsg = error.message;
                    if (error.name === 'NotAllowedError') {
                        errorMsg = 'Permisos de cámara denegados.';
                    } else if (error.name === 'NotFoundError') {
                        errorMsg = 'No se encontró cámara trasera.';
                    } else if (error.name === 'NotSupportedError') {
                        errorMsg = 'AR no soportado en este navegador.';
                    }

                    alert('Error AR: ' + errorMsg);
                }
            }

            renderAR(timestamp, frame) {
                if (!frame || !this.isARActive) return;

                const session = this.renderer.xr.getSession();
                const referenceSpace = this.renderer.xr.getReferenceSpace();

                // Initialize hit test source
                if (!this.hitTestSource) {
                    session.requestReferenceSpace('viewer').then(viewerSpace => {
                        session.requestHitTestSource({ space: viewerSpace })
                            .then(source => {
                                this.hitTestSource = source;
                                console.log('✅ Hit test source inicializado');
                            })
                            .catch(err => {
                                console.error('❌ Error inicializando hit test:', err);
                            });
                    });
                    return;
                }

                // Perform hit testing only if model is not placed
                if (!this.model.visible) {
                    const hitTestResults = frame.getHitTestResults(this.hitTestSource);

                    if (hitTestResults.length > 0) {
                        const hit = hitTestResults[0];
                        const pose = hit.getPose(referenceSpace);

                        if (pose) {
                            // Show reticle on detected surface
                            this.reticle.visible = true;
                            this.reticle.matrix.fromArray(pose.transform.matrix);
                            this.reticle.matrix.decompose(
                                this.reticle.position,
                                this.reticle.quaternion,
                                this.reticle.scale
                            );
                        }
                    } else {
                        this.reticle.visible = false;
                    }
                } else {
                    this.reticle.visible = false;
                }

                // Render the scene
                this.renderer.render(this.scene, this.camera);
            }

            onARSelect() {
                console.log('🎯 Superficie tocada para colocar modelo');

                if (!this.reticle.visible || this.model.visible) {
                    console.log('⚠️ No se puede colocar');
                    return;
                }

                // Get surface position
                const position = new THREE.Vector3();
                const quaternion = new THREE.Quaternion();
                const scale = new THREE.Vector3();
                this.reticle.matrix.decompose(position, quaternion, scale);

                console.log('📍 Posición de superficie:', position);

                // Restore base model transformations but adapt for AR
                if (this.modelStateBeforeAR) {
                    // Copy rotation from original state (IA applied)
                    this.model.rotation.copy(this.modelStateBeforeAR.rotation);
                    console.log('✅ Rotación IA aplicada:', this.model.rotation.y * 180 / Math.PI);
                }

                // Position on detected surface
                this.model.position.x = position.x;
                this.model.position.z = position.z;
                this.model.position.y = position.y + 0.02; // Slightly above surface

                // Special handling for pizza3/4 (displaced center models) in AR
                if (this.aiAnalysis && this.aiAnalysis.problemType === 'displaced_center_small') {
                    console.log('🍕 Aplicando configuración especial AR para pizza3/4');

                    // For pizza3/4, use a consistent AR scale regardless of IA scale
                    this.model.scale.set(0.8, 0.8, 0.8); // Bigger scale for displaced models

                    // Apply the center correction from IA but in AR context
                    const center = this.aiAnalysis.center.clone();
                    center.y = 0; // Don't offset Y in AR
                    this.model.position.add(center.negate());

                    console.log('📊 Pizza3/4 AR - Posición:', this.model.position);
                    console.log('📊 Pizza3/4 AR - Escala:', this.model.scale);
                } else {
                    // Normal models: use standard AR scaling based on original scale
                    const originalScale = this.modelStateBeforeAR ? this.modelStateBeforeAR.scale.x : 1.0;
                    const arScale = Math.min(0.5, originalScale * 0.3); // Cap AR scale
                    this.model.scale.set(arScale, arScale, arScale);

                    console.log('📊 Modelo normal AR - Escala:', arScale);
                }

                // Force visibility and ensure materials are properly set
                this.model.visible = true;
                this.model.traverse((child) => {
                    if (child.isMesh) {
                        child.visible = true;
                        if (child.material) {
                            child.material.transparent = false;
                            child.material.opacity = 1.0;
                            child.material.side = THREE.DoubleSide;

                            // Force material update
                            child.material.needsUpdate = true;
                        }
                    }
                });

                this.reticle.visible = false;
                console.log('🎯 Modelo colocado en AR (tratamiento especial aplicado)');
                console.log('📊 Posición final:', this.model.position);
                console.log('📊 Escala final:', this.model.scale);
                console.log('📊 Visible:', this.model.visible);
            }

            onAREnd() {
                console.log('🔚 Sesión AR finalizada');

                this.isARActive = false;
                this.hitTestSource = null;

                if (this.reticle) {
                    this.reticle.visible = false;
                }

                // Restore exact model state from before AR (no changes)
                if (this.model && this.modelStateBeforeAR) {
                    this.model.position.copy(this.modelStateBeforeAR.position);
                    this.model.rotation.copy(this.modelStateBeforeAR.rotation);
                    this.model.scale.copy(this.modelStateBeforeAR.scale);
                    this.model.visible = this.modelStateBeforeAR.visible;
                    console.log('✅ Estado del modelo restaurado completamente');
                }

                // Restore background
                this.scene.background = this.backgroundTexture;

                // Update AR button
                const arButton = document.getElementById('ar-toggle');
                if (arButton) {
                    arButton.classList.remove('active');
                    arButton.textContent = '📷';
                }

                // Clear stored state
                this.modelStateBeforeAR = null;

                // Return to normal animation loop
                this.renderer.setAnimationLoop(null);
                this.animate();

                console.log('🎯 Regreso a vista 3D tradicional sin cambios');
            }

            stopAR() {
                if (this.arSession) {
                    this.arSession.end();
                }
            }
        }

        // Global app instance
        let app;

        // UI Helper Functions
        function togglePanel(panelId) {
            const panel = document.getElementById(panelId);
            if (panel) {
                panel.classList.toggle('hidden');
            }
        }

        function togglePanels() {
            if (!app) return;

            const panels = ['controls-panel', 'stats-panel', 'ai-panel'];
            const currentIndex = panels.indexOf(app.currentPanel);
            const nextIndex = (currentIndex + 1) % panels.length;

            // Hide current panel
            if (app.currentPanel) {
                const currentPanel = document.getElementById(app.currentPanel);
                if (currentPanel) {
                    currentPanel.classList.remove('visible');
                    currentPanel.classList.add('hidden');
                }
            }

            // Show next panel
            app.currentPanel = panels[nextIndex];
            const nextPanel = document.getElementById(app.currentPanel);
            if (nextPanel) {
                nextPanel.classList.remove('hidden');
                nextPanel.classList.add('visible');
            }

            // Update toggle button icon
            const toggleBtn = document.getElementById('panel-toggle');
            const icons = ['🎮', '📊', '🤖'];
            if (toggleBtn) {
                toggleBtn.textContent = icons[nextIndex];
            }
        }

        function toggleAR() {
            if (!app) return;

            if (app.isARActive) {
                // Stop AR
                app.stopAR();
            } else {
                // Start AR
                app.startAR();
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            console.log('🚀 Iniciando Enhanced Desktop Viewer');
            app = new DesktopViewer();
        });

        // Global error handler
        window.addEventListener('error', (e) => {
            console.error('🔴 Error global:', e.error);
            if (app) app.showError('Error global: ' + e.message);
        });
    </script>
</body>
</html>