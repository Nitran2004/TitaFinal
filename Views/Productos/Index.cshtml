@model IEnumerable<ProyectoIdentity.Models.Producto>

<h2>Menú de Productos</h2>

<div id="carrito-resumen" style="position: fixed; top: 10px; right: 10px; background-color: #f8f9fa; padding: 10px; border-radius: 5px; border: 1px solid #ddd; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
    <h4>Carrito <span id="cart-count">(0)</span></h4>
    <p>Total: $<span id="cart-total">0.00</span></p>
    <button id="ver-carrito" class="btn btn-primary">Ver Carrito</button>
</div>

<div class="product-list">
    @foreach (var producto in Model)
    {
        <div class="product-item" style="margin-bottom: 30px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
            <!-- Imagen -->
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(producto.Imagen)"
                 alt="@producto.Nombre"
                 style="max-width:200px; height:auto; display:block; margin-bottom:10px;" />
            <!-- Datos -->
            <h4>@producto.Nombre</h4>
            <p>@producto.Categoria</p>
            <p>Precio: $@(producto.Precio?.ToString("F2") ?? "0.00")</p>
            <!-- Controles para añadir al carrito -->
            <div class="add-to-cart-controls">
                <input type="number" id="cantidad-@producto.Id" value="1" min="1" style="width: 60px; margin-right: 10px;" />
                <button class="btn btn-success add-to-cart-btn" data-id="@producto.Id" data-name="@producto.Nombre" data-price="@producto.Precio">
                    Agregar al Carrito
                </button>
                <a asp-controller="Productos" asp-action="Detalle" asp-route-id="@producto.Id" class="btn btn-info" style="margin-left: 10px;">
                    Ver Detalles
                </a>
            </div>
        </div>
    }
</div>

<!-- Modal para visualizar el carrito -->
<div id="carrito-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="background-color: white; width: 80%; max-width: 800px; margin: 50px auto; padding: 20px; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.3);">
        <h3>Tu Carrito</h3>
        <table class="table" id="cart-table">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Subtotal</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="cart-items">
                <!-- Los items del carrito se cargarán aquí dinámicamente -->
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3" class="text-right"><strong>Total:</strong></td>
                    <td id="cart-modal-total">$0.00</td>
                    <td></td>
                </tr>
            </tfoot>
        </table>
        <div style="display: flex; justify-content: space-between; margin-top: 20px;">
            <button id="cerrar-carrito" class="btn btn-secondary">Seguir Comprando</button>
            <form asp-controller="Pedidos" asp-action="CrearDesdeCarrito" method="post">
                <input type="hidden" id="pedido-json" name="pedidoJson" value="" />
                <button type="submit" class="btn btn-primary">Procesar Pedido</button>
            </form>
        </div>
    </div>
</div>

<script>
    // Inicialización del carrito
    let cart = JSON.parse(localStorage.getItem('cart')) || [];

    // Actualizar el resumen del carrito
    function updateCartSummary() {
        const count = cart.reduce((sum, item) => sum + item.quantity, 0);
        const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);

        document.getElementById('cart-count').textContent = `(${count})`;
        document.getElementById('cart-total').textContent = total;
    }

    // Agregar al carrito
    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.addEventListener('click', function () {
            const id = this.getAttribute('data-id');
            const name = this.getAttribute('data-name');
            const price = parseFloat(this.getAttribute('data-price'));
            const quantity = parseInt(document.getElementById(`cantidad-${id}`).value);

            // Verificar si el producto ya está en el carrito
            const existingItemIndex = cart.findIndex(item => item.id === id);

            if (existingItemIndex >= 0) {
                // Si ya existe, incrementar la cantidad
                cart[existingItemIndex].quantity += quantity;
            } else {
                // Si no existe, añadir como nuevo item
                cart.push({
                    id: id,
                    name: name,
                    price: price,
                    quantity: quantity
                });
            }

            // Guardar en localStorage
            localStorage.setItem('cart', JSON.stringify(cart));

            // Actualizar el resumen
            updateCartSummary();

            // Mostrar mensaje
            alert(`${quantity} ${name}(s) añadidos al carrito`);
        });
    });

    // Ver carrito
    document.getElementById('ver-carrito').addEventListener('click', function () {
        // Limpiar la tabla
        const cartItems = document.getElementById('cart-items');
        cartItems.innerHTML = '';

        // Llenar con los items actuales
        cart.forEach(item => {
            const subtotal = (item.price * item.quantity).toFixed(2);
            cartItems.innerHTML += `
                    <tr data-id="${item.id}">
                        <td>${item.name}</td>
                        <td>$${item.price.toFixed(2)}</td>
                        <td>
                            <button class="btn btn-sm btn-secondary decrease-qty">-</button>
                            <span class="item-qty mx-2">${item.quantity}</span>
                            <button class="btn btn-sm btn-secondary increase-qty">+</button>
                        </td>
                        <td>$${subtotal}</td>
                        <td><button class="btn btn-sm btn-danger remove-item">Eliminar</button></td>
                    </tr>
                `;
        });

        // Actualizar el total
        const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);
        document.getElementById('cart-modal-total').textContent = `$${total}`;

        // Preparar datos para el formulario
        document.getElementById('pedido-json').value = JSON.stringify(cart);

        // Mostrar el modal
        document.getElementById('carrito-modal').style.display = 'block';
    });

    // Cerrar carrito
    document.getElementById('cerrar-carrito').addEventListener('click', function () {
        document.getElementById('carrito-modal').style.display = 'none';
    });

    // Manejar cambios en el carrito (delegación de eventos)
    document.getElementById('cart-items').addEventListener('click', function (event) {
        const target = event.target;
        const row = target.closest('tr');
        const id = row.getAttribute('data-id');
        const itemIndex = cart.findIndex(item => item.id === id);

        if (itemIndex >= 0) {
            // Botón de disminuir cantidad
            if (target.classList.contains('decrease-qty')) {
                if (cart[itemIndex].quantity > 1) {
                    cart[itemIndex].quantity--;
                    row.querySelector('.item-qty').textContent = cart[itemIndex].quantity;
                    row.cells[3].textContent = `$${(cart[itemIndex].price * cart[itemIndex].quantity).toFixed(2)}`;
                }
            }

            // Botón de aumentar cantidad
            if (target.classList.contains('increase-qty')) {
                cart[itemIndex].quantity++;
                row.querySelector('.item-qty').textContent = cart[itemIndex].quantity;
                row.cells[3].textContent = `$${(cart[itemIndex].price * cart[itemIndex].quantity).toFixed(2)}`;
            }

            // Botón de eliminar item
            if (target.classList.contains('remove-item')) {
                cart.splice(itemIndex, 1);
                row.remove();
            }

            // Actualizar localStorage
            localStorage.setItem('cart', JSON.stringify(cart));

            // Actualizar total
            const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);
            document.getElementById('cart-modal-total').textContent = `$${total}`;
            document.getElementById('pedido-json').value = JSON.stringify(cart);

            // Actualizar resumen
            updateCartSummary();
        }
    });

    // Inicializar resumen al cargar la página
    document.addEventListener('DOMContentLoaded', updateCartSummary);
</script>